{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card",
  "type": "registry:ui",
  "dependencies": ["clsx", "tailwind-merge", "class-variance-authority"],
  "files": [
    {
      "path": "registry/default/ui/card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define CardContext\ntype CardContextType = {\n  variant: 'default' | 'accent';\n};\n\nconst CardContext = React.createContext<CardContextType>({\n  variant: 'default', // Default value\n});\n\n// Hook to use CardContext\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('useCardContext must be used within a Card component');\n  }\n  return context;\n};\n\n// Variants\nconst cardVariants = cva(\n  'flex flex-col items-stretch text-card-foreground rounded-xl',\n  {\n    variants: {\n      variant: {\n        default: 'bg-card border border-border shadow-xs black/5',\n        accent: 'bg-muted shadow-xs p-1',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nconst cardHeaderVariants = cva(\n  'flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5',\n  {\n    variants: {\n      variant: {\n        default: 'border-b border-border',\n        accent: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: {\n    variant: {\n      default: 'border-t border-border',\n      accent: 'bg-card rounded-b-xl mt-[2px]',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Card Component\nfunction Card({\n  className,\n  variant = 'default',\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div\n        data-slot=\"card\"\n        className={cn(cardVariants({ variant }), className)}\n        {...props}\n      />\n    </CardContext.Provider>\n  );\n}\n\n// CardHeader Component\nfunction CardHeader({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(cardHeaderVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\n// CardContent Component\nfunction CardContent({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(cardContentVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\n// CardTable Component\nfunction CardTable({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return (\n    <div\n      data-slot=\"card-table\"\n      className={cn(cardTableVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\n// CardFooter Component\nfunction CardFooter({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(cardFooterVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\n// Other Components\nfunction CardHeading({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"card-heading\"\n      className={cn('space-y-1', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardToolbar({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"card-toolbar\"\n      className={cn('flex items-center gap-2.5', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"card-title\"\n      className={cn(\n        'text-base font-semibold leading-none tracking-tight',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn('text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  );\n}\n\n// Exports\nexport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardHeading,\n  CardTable,\n  CardTitle,\n  CardToolbar,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
