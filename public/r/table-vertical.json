{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table-vertical",
  "type": "registry:component",
  "dependencies": ["clsx", "tailwind-merge", "@radix-ui/react-slot", "class-variance-authority"],
  "registryDependencies": ["https://reui.io/r/badge.json", "https://reui.io/r/table.json"],
  "files": [
    {
      "path": "registry/default/components/table/vertical.tsx",
      "content": "import { Badge } from '@/registry/default/ui/badge';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n} from '@/registry/default/ui/table';\n\nexport default function TableDemo() {\n  return (\n    <div className=\"border border-border rounded-lg overflow-hidden\">\n      <Table className=\"w-full md:w-[350px]\">\n        <TableBody>\n          <TableRow className=\"*:border-border hover:bg-transparent [&>:not(:last-child)]:border-r\">\n            <TableCell className=\"bg-muted/50 py-2 font-medium\">Name</TableCell>\n            <TableCell className=\"py-2\">Sophia Johnson</TableCell>\n          </TableRow>\n          <TableRow className=\"*:border-border hover:bg-transparent [&>:not(:last-child)]:border-r\">\n            <TableCell className=\"bg-muted/50 py-2 font-medium\">\n              Email\n            </TableCell>\n            <TableCell className=\"py-2\">s.johnson@company.com</TableCell>\n          </TableRow>\n          <TableRow className=\"*:border-border hover:bg-transparent [&>:not(:last-child)]:border-r\">\n            <TableCell className=\"bg-muted/50 py-2 font-medium\">\n              Location\n            </TableCell>\n            <TableCell className=\"py-2\">New York, USA</TableCell>\n          </TableRow>\n          <TableRow className=\"*:border-border hover:bg-transparent [&>:not(:last-child)]:border-r\">\n            <TableCell className=\"bg-muted/50 py-2 font-medium\">Role</TableCell>\n            <TableCell className=\"py-2\">\n              <Badge variant=\"secondary\">Admin</Badge>\n            </TableCell>\n          </TableRow>\n          <TableRow className=\"*:border-border hover:bg-transparent [&>:not(:last-child)]:border-r\">\n            <TableCell className=\"bg-muted/50 py-2 font-medium\">\n              Status\n            </TableCell>\n            <TableCell className=\"py-2\">\n              <Badge variant=\"primary\">Active</Badge>\n            </TableCell>\n          </TableRow>\n          <TableRow className=\"*:border-border hover:bg-transparent [&>:not(:last-child)]:border-r\">\n            <TableCell className=\"bg-muted/50 py-2 font-medium\">\n              Last Login\n            </TableCell>\n            <TableCell className=\"py-2\">Jan 25, 2025</TableCell>\n          </TableRow>\n          <TableRow className=\"*:border-border hover:bg-transparent [&>:not(:last-child)]:border-r\">\n            <TableCell className=\"bg-muted/50 py-2 font-medium\">\n              Balance\n            </TableCell>\n            <TableCell className=\"py-2\">$1,250.00</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/badge.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n  dotClassName?: string;\n  disabled?: boolean;\n}\n\nexport interface BadgeButtonProps\n  extends React.ButtonHTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeButtonVariants> {\n  asChild?: boolean;\n}\n\nexport type BadgeDotProps = React.HTMLAttributes<HTMLSpanElement>;\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center border font-medium focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 [&_svg]:-ms-px [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground',\n        secondary: 'bg-secondary text-secondary-foreground',\n        success: 'bg-green-500 text-white',\n        warning: 'bg-yellow-500 text-white',\n        info: 'bg-violet-500 text-white',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black',\n        destructive: 'bg-destructive text-destructive-foreground',\n      },\n      appearance: {\n        solid: 'border-transparent',\n        outline: '',\n        light: '',\n        stroke: 'bg-transparent border border-border text-secondary-foreground',\n        ghost: 'border-transparent bg-transparent',\n      },\n      disabled: {\n        true: 'opacity-50 pointer-events-none',\n      },\n      size: {\n        lg: 'rounded-md px-[0.5rem] h-7 min-w-7 gap-1.5 text-xs [&_svg]:size-3.5',\n        md: 'rounded-md px-[0.45rem] h-6 min-w-6 gap-1.5 text-xs [&_svg]:size-3.5 ',\n        sm: 'rounded-sm px-[0.325rem] h-5 min-w-5 gap-1 text-[0.6875rem] leading-[0.75rem] [&_svg]:size-3',\n        xs: 'rounded-sm px-[0.25rem] h-4 min-w-4 gap-1 text-[0.625rem] leading-[0.5rem] [&_svg]:size-3',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n    },\n    compoundVariants: [\n      {\n        variant: 'primary',\n        appearance: 'outline',\n        className: 'bg-primary/10 border-primary/10 text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'outline',\n        className:\n          'bg-secondary dark:bg-secondary/50 border-border text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'outline',\n        className:\n          'border bg-green-100 text-green-700 border-green-200 dark:text-green-600 dark:bg-green-950/50 dark:border-green-950',\n      },\n      {\n        variant: 'warning',\n        appearance: 'outline',\n        className:\n          'border bg-yellow-100 text-yellow-700 border-yellow-200 dark:text-yellow-600 dark:bg-yellow-950/50 dark:border-yellow-950',\n      },\n      {\n        variant: 'info',\n        appearance: 'outline',\n        className:\n          'border bg-violet-100 text-violet-700 border-violet-200 dark:text-violet-600 dark:bg-violet-950/50 dark:border-violet-950',\n      },\n      {\n        variant: 'mono',\n        appearance: 'outline',\n        className:\n          'bg-zinc-100 dark:bg-zinc-300/10 border-zinc-300 dark:border-zinc-300/10 text-zinc-950 dark:text-zinc-200',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'outline',\n        className: 'bg-destructive/10 border-destructive/10 text-destructive',\n      },\n\n      {\n        variant: 'primary',\n        appearance: 'light',\n        className: 'bg-primary/10 text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'light',\n        className:\n          'bg-secondary dark:bg-secondary/50 text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'light',\n        className:\n          'border bg-green-100 text-green-700 dark:text-green-600 dark:bg-green-950/50',\n      },\n      {\n        variant: 'warning',\n        appearance: 'light',\n        className:\n          'border bg-yellow-100 text-yellow-700 dark:text-yellow-600 dark:bg-yellow-950/50',\n      },\n      {\n        variant: 'info',\n        appearance: 'light',\n        className:\n          'border bg-violet-100 text-violet-700 dark:text-violet-600 dark:bg-violet-950/50',\n      },\n      {\n        variant: 'mono',\n        appearance: 'light',\n        className:\n          'bg-zinc-200 dark:bg-zinc-300/10 text-zinc-950 dark:text-zinc-200',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'light',\n        className: 'bg-destructive/10 text-destructive',\n      },\n\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'ghost',\n        className: 'text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'ghost',\n        className: 'text-green-500',\n      },\n      {\n        variant: 'warning',\n        appearance: 'ghost',\n        className: 'text-yellow-500',\n      },\n      { variant: 'info', appearance: 'ghost', className: 'text-violet-500' },\n      { variant: 'mono', appearance: 'ghost', className: 'text-foreground' },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'text-destructive',\n      },\n\n      { size: 'lg', appearance: 'ghost', className: 'px-0' },\n      { size: 'md', appearance: 'ghost', className: 'px-0' },\n      { size: 'sm', appearance: 'ghost', className: 'px-0' },\n      { size: 'xs', appearance: 'ghost', className: 'px-0' },\n    ],\n    defaultVariants: {\n      variant: 'secondary',\n      appearance: 'solid',\n      size: 'md',\n    },\n  },\n);\n\nconst badgeButtonVariants = cva(\n  'cursor-pointer transition-all inline-flex items-center justify-center leading-none size-3.5 [&>svg]:opacity-100! [&>svg]:size-3.5 p-0 rounded-md -me-0.5 opacity-60 hover:opacity-100',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  size,\n  appearance,\n  shape,\n  asChild = false,\n  disabled,\n  ...props\n}: BadgeProps) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(\n        badgeVariants({ variant, size, appearance, shape, disabled }),\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction BadgeButton({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: BadgeButtonProps) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      data-slot=\"badge-button\"\n      className={cn(badgeButtonVariants({ variant, className }))}\n      role=\"button\"\n      {...props}\n    />\n  );\n}\n\nfunction BadgeDot({ className, ...props }: BadgeDotProps) {\n  return (\n    <span\n      data-slot=\"badge-dot\"\n      className={cn(\n        'size-1.5 rounded-full bg-[currentColor] opacity-75',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, BadgeButton, BadgeDot, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/table.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\n\nfunction Table({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLTableElement>) {\n  return (\n    <div data-slot=\"table-wrapper\" className=\"relative w-full overflow-auto\">\n      <table\n        data-slot=\"table\"\n        className={cn(\n          'w-full caption-bottom text-foreground text-sm',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction TableHeader({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLTableSectionElement>) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn('[&_tr]:border-b', className)}\n      {...props}\n    />\n  );\n}\n\nfunction TableBody({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLTableSectionElement>) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn('[&_tr:last-child]:border-0', className)}\n      {...props}\n    />\n  );\n}\n\nfunction TableFooter({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLTableSectionElement>) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        'border-t bg-muted/50 font-medium last:[&>tr]:border-b-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableRow({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLTableRowElement>) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        'border-b transition-colors [&:has(td):hover]:bg-muted/50 data-[state=selected]:bg-muted',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableHead({\n  className,\n  ...props\n}: React.ThHTMLAttributes<HTMLTableCellElement>) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        'h-12 px-4 text-left rtl:text-right align-middle font-normal text-muted-foreground [&:has([role=checkbox])]:pe-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableCell({\n  className,\n  ...props\n}: React.TdHTMLAttributes<HTMLTableCellElement>) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        'p-4 align-middle [&:has([role=checkbox])]:pe-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLTableCaptionElement>) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn('mt-4 text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
