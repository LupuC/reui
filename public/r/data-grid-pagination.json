{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-grid-pagination",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react",
    "@tanstack/react-table",
    "@radix-ui/react-select"
  ],
  "registryDependencies": [
    "https://reui.io/r/button.json",
    "https://reui.io/r/data-grid.json",
    "https://reui.io/r/select.json",
    "https://reui.io/r/skeleton.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/data-grid-pagination.tsx",
      "content": "import { ReactNode } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Button } from '@/registry/default/ui/button';\nimport { useDataGrid } from '@/registry/default/ui/data-grid';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/registry/default/ui/select';\nimport { Skeleton } from '@/registry/default/ui/skeleton';\nimport { ChevronLeftIcon, ChevronRightIcon } from 'lucide-react';\n\ninterface DataGridPaginationProps {\n  sizes?: number[];\n  sizesInfo?: string;\n  sizesLabel?: string;\n  sizesDescription?: string;\n  sizesSkeleton?: ReactNode;\n  more?: boolean;\n  moreLimit?: number;\n  info?: string;\n  infoSkeleton?: ReactNode;\n}\n\nfunction DataGridPagination(props: DataGridPaginationProps) {\n  const { table, recordCount, isLoading } = useDataGrid();\n\n  const defaultProps: Partial<DataGridPaginationProps> = {\n    sizes: [5, 10, 25, 50, 100],\n    sizesLabel: 'Show',\n    sizesDescription: 'per page',\n    sizesSkeleton: <Skeleton className=\"h-8 w-44\" />,\n    moreLimit: 5,\n    more: false,\n    info: '{from} - {to} of {count}',\n    infoSkeleton: <Skeleton className=\"h-8 w-60\" />,\n  };\n\n  const mergedProps: DataGridPaginationProps = { ...defaultProps, ...props };\n\n  const btnBaseClasses = 'size-7 p-0 text-sm';\n  const btnArrowClasses = btnBaseClasses + ' rtl:transform rtl:rotate-180';\n  const pageIndex = table.getState().pagination.pageIndex;\n  const pageSize = table.getState().pagination.pageSize;\n  const from = pageIndex * pageSize + 1;\n  const to = Math.min((pageIndex + 1) * pageSize, recordCount);\n  const pageCount = table.getPageCount();\n\n  // Replace placeholders in paginationInfo\n  const paginationInfo = mergedProps?.info\n    ? mergedProps.info\n        .replace('{from}', from.toString())\n        .replace('{to}', to.toString())\n        .replace('{count}', recordCount.toString())\n    : `${from} - ${to} of ${recordCount}`;\n\n  // Pagination limit logic\n  const paginationMoreLimit = mergedProps?.moreLimit || 5;\n\n  // Determine the start and end of the pagination group\n  const currentGroupStart =\n    Math.floor(pageIndex / paginationMoreLimit) * paginationMoreLimit;\n  const currentGroupEnd = Math.min(\n    currentGroupStart + paginationMoreLimit,\n    pageCount,\n  );\n\n  // Render page buttons based on the current group\n  const renderPageButtons = () => {\n    const buttons = [];\n    for (let i = currentGroupStart; i < currentGroupEnd; i++) {\n      buttons.push(\n        <Button\n          key={i}\n          size=\"sm\"\n          mode=\"icon\"\n          variant=\"ghost\"\n          className={cn(btnBaseClasses, 'text-muted-foreground', {\n            'bg-accent text-accent-foreground': pageIndex === i,\n          })}\n          onClick={() => {\n            if (pageIndex !== i) {\n              table.setPageIndex(i);\n            }\n          }}\n        >\n          {i + 1}\n        </Button>,\n      );\n    }\n    return buttons;\n  };\n\n  // Render a \"previous\" ellipsis button if there are previous pages to show\n  const renderEllipsisPrevButton = () => {\n    if (currentGroupStart > 0) {\n      return (\n        <Button\n          size=\"sm\"\n          mode=\"icon\"\n          className={btnBaseClasses}\n          variant=\"ghost\"\n          onClick={() => table.setPageIndex(currentGroupStart - 1)}\n        >\n          ...\n        </Button>\n      );\n    }\n    return null;\n  };\n\n  // Render a \"next\" ellipsis button if there are more pages to show after the current group\n  const renderEllipsisNextButton = () => {\n    if (currentGroupEnd < pageCount) {\n      return (\n        <Button\n          className={btnBaseClasses}\n          variant=\"ghost\"\n          size=\"sm\"\n          mode=\"icon\"\n          onClick={() => table.setPageIndex(currentGroupEnd)}\n        >\n          ...\n        </Button>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div\n      data-slot=\"data-grid-pagination\"\n      className=\"flex flex-wrap flex-col sm:flex-row justify-between items-center gap-2.5 py-2.5 sm:py-0 grow\"\n    >\n      <div className=\"flex flex-wrap items-center space-x-2.5 pb-2.5 sm:pb-0 order-2 sm:order-1\">\n        {isLoading ? (\n          mergedProps?.sizesSkeleton\n        ) : (\n          <>\n            <div className=\"text-sm text-muted-foreground\">Rows per page</div>\n            <Select\n              value={`${pageSize}`}\n              indicatorPosition=\"right\"\n              onValueChange={(value) => {\n                const newPageSize = Number(value);\n                table.setPageSize(newPageSize);\n              }}\n            >\n              <SelectTrigger className=\"w-fit h-8\" size=\"sm\">\n                <SelectValue placeholder={`${pageSize}`} />\n              </SelectTrigger>\n              <SelectContent side=\"top\" className=\"min-w-[50px]\">\n                {mergedProps?.sizes?.map((size: number) => (\n                  <SelectItem key={size} value={`${size}`}>\n                    {size}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </>\n        )}\n      </div>\n      <div className=\"flex flex-col sm:flex-row justify-center sm:justify-end items-center gap-2.5 pt-2.5 sm:pt-0 order-1 sm:order-2\">\n        {isLoading ? (\n          mergedProps?.infoSkeleton\n        ) : (\n          <>\n            <div className=\"text-sm text-muted-foreground text-nowrap order-2 sm:order-1\">\n              {paginationInfo}\n            </div>\n            {pageCount > 1 && (\n              <div className=\"flex items-center space-x-1 order-1 sm:order-2\">\n                <Button\n                  size=\"sm\"\n                  mode=\"icon\"\n                  variant=\"ghost\"\n                  className={btnArrowClasses}\n                  onClick={() => table.previousPage()}\n                  disabled={!table.getCanPreviousPage()}\n                >\n                  <span className=\"sr-only\">Go to previous page</span>\n                  <ChevronLeftIcon className=\"size-4\" />\n                </Button>\n\n                {renderEllipsisPrevButton()}\n\n                {renderPageButtons()}\n\n                {renderEllipsisNextButton()}\n\n                <Button\n                  size=\"sm\"\n                  mode=\"icon\"\n                  variant=\"ghost\"\n                  className={btnArrowClasses}\n                  onClick={() => table.nextPage()}\n                  disabled={!table.getCanNextPage()}\n                >\n                  <span className=\"sr-only\">Go to next page</span>\n                  <ChevronRightIcon className=\"size-4\" />\n                </Button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport { DataGridPagination, type DataGridPaginationProps };\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/button.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown, LucideIcon } from 'lucide-react';\n\nconst buttonVariants = cva(\n  'cursor-pointer group whitespace-nowrap focus-visible:outline-hidden inline-flex items-center justify-center has-data-[arrow=true]:justify-between whitespace-nowrap text-sm font-medium ring-offset-background transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-60 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary:\n          'bg-primary text-primary-foreground hover:bg-primary/90 data-[state=open]:bg-primary/90',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black hover:bg-zinc-950/90 dark:hover:bg-zinc-300/90 data-[state=open]:bg-zinc-950/90 dark:data-[state=open]:bg-zinc-300/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90 data-[state=open]:bg-destructive/90',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/90 data-[state=open]:bg-secondary/90',\n        outline:\n          'bg-background text-accent-foreground border border-input hover:bg-accent data-[state=open]:bg-accent',\n        dashed:\n          'text-accent-foreground border border-input border-dashed bg-background hover:bg-accent hover:text-accent-foreground data-[state=open]:text-accent-foreground',\n        ghost:\n          'text-accent-foreground hover:bg-accent hover:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        dim: 'text-muted-foreground hover:text-foreground data-[state=open]:text-foreground',\n        foreground: '',\n        inverse: '',\n      },\n      appearance: {\n        default: '',\n        ghost: '',\n      },\n      underline: {\n        solid: '',\n        dashed: '',\n      },\n      underlined: {\n        solid: '',\n        dashed: '',\n      },\n      size: {\n        lg: 'h-10 rounded-md px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-8.5 rounded-md px-3 gap-1.5 text-[0.8125rem] leading-(--text-sm--line-height) [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-7 rounded-md px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n      },\n      autoHeight: {\n        true: '',\n        false: '',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n      mode: {\n        default:\n          'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        icon: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        link: 'text-primary h-auto p-0 bg-transparent rounded-none hover:bg-transparent data-[state=open]:bg-transparent',\n        input: `\n            justify-start font-normal hover:bg-background [&_svg]:transition-colors [&_svg]:hover:text-foreground data-[state=open]:bg-background \n            focus-visible:border-ring focus-visible:outline-hidden focus-visible:ring-[3px] focus-visible:ring-ring/30 \n            [[data-state=open]>&]:border-ring [[data-state=open]>&]:outline-hidden [[data-state=open]>&]:ring-[3px] \n            [[data-state=open]>&]:ring-ring/30 \n            aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n            in-data-[invalid=true]:border-destructive/60 in-data-[invalid=true]:ring-destructive/10  dark:in-data-[invalid=true]:border-destructive dark:in-data-[invalid=true]:ring-destructive/20\n          `,\n      },\n      placeholder: {\n        true: 'text-muted-foreground',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      // Icons opacity for default mode\n      {\n        variant: 'ghost',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n\n      // Icons opacity for default mode\n      {\n        variant: 'outline',\n        mode: 'input',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n\n      // Auto height\n      {\n        size: 'md',\n        autoHeight: true,\n        className: 'h-auto min-h-8.5',\n      },\n      {\n        size: 'sm',\n        autoHeight: true,\n        className: 'h-auto min-h-7',\n      },\n      {\n        size: 'lg',\n        autoHeight: true,\n        className: 'h-auto min-h-10',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Link\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      // Ghost\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className:\n          'bg-transparent text-primary/90 hover:bg-primary/5 data-[state=open]:bg-primary/5',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className:\n          'bg-transparent text-destructive/90 hover:bg-destructive/5 data-[state=open]:bg-destructive/5',\n      },\n      {\n        variant: 'ghost',\n        mode: 'icon',\n        className: 'text-muted-foreground',\n      },\n\n      // Size\n      {\n        size: 'sm',\n        mode: 'icon',\n        className: 'w-7 h-7 p-0 [[&_svg:not([class*=size-])]:size-3.5',\n      },\n      {\n        size: 'md',\n        mode: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'lg',\n        mode: 'icon',\n        className: 'w-10 h-10 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n\n      // Input mode\n      {\n        mode: 'input',\n        placeholder: true,\n        variant: 'outline',\n        className: 'font-normal text-muted-foreground',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'sm',\n        className: 'gap-1.25',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'md',\n        className: 'gap-1.5',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'lg',\n        className: 'gap-1.5',\n      },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      mode: 'default',\n      size: 'md',\n      shape: 'default',\n      appearance: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  selected,\n  variant,\n  shape,\n  appearance,\n  mode,\n  size,\n  autoHeight,\n  underlined,\n  underline,\n  asChild = false,\n  placeholder = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    selected?: boolean;\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : 'button';\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          shape,\n          appearance,\n          mode,\n          autoHeight,\n          placeholder,\n          underlined,\n          underline,\n          className,\n        }),\n        asChild && props.disabled && 'pointer-events-none opacity-50',\n      )}\n      {...(selected && { 'data-state': 'open' })}\n      {...props}\n    />\n  );\n}\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon; // Allows passing any Lucide icon\n}\n\nfunction ButtonArrow({\n  icon: Icon = ChevronDown,\n  className,\n  ...props\n}: ButtonArrowProps) {\n  return (\n    <Icon\n      data-slot=\"button-arrow\"\n      className={cn('ms-auto -me-1', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Button, ButtonArrow, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/data-grid.tsx",
      "content": "'use client';\n\nimport { createContext, ReactNode, useContext } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport {\n  ColumnFiltersState,\n  RowData,\n  SortingState,\n  Table,\n} from '@tanstack/react-table';\n\ndeclare module '@tanstack/react-table' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface ColumnMeta<TData extends RowData, TValue> {\n    headerTitle?: string;\n    headerClassName?: string;\n    cellClassName?: string;\n    skeleton?: ReactNode;\n    expandedContent?: (row: TData) => ReactNode;\n  }\n}\n\nexport type DataGridApiFetchParams = {\n  pageIndex: number;\n  pageSize: number;\n  sorting?: SortingState;\n  filters?: ColumnFiltersState;\n  searchQuery?: string;\n};\n\nexport type DataGridApiResponse<T> = {\n  data: T[];\n  empty: boolean;\n  pagination: {\n    total: number;\n    page: number;\n  };\n};\n\nexport interface DataGridContextProps<TData extends object> {\n  props: DataGridProps<TData>;\n  table: Table<TData>;\n  recordCount: number;\n  isLoading: boolean;\n}\n\nexport type DataGridRequestParams = {\n  pageIndex: number;\n  pageSize: number;\n  sorting?: SortingState;\n  columnFilters?: ColumnFiltersState;\n};\n\nexport interface DataGridProps<TData extends object> {\n  className?: string;\n  table?: Table<TData>;\n  recordCount: number;\n  children?: ReactNode;\n  onRowClick?: (row: TData) => void;\n  isLoading?: boolean;\n  loadingMode?: 'skeleton' | 'spinner';\n  loadingMessage?: ReactNode | string;\n  emptyMessage?: ReactNode | string;\n  tableLayout?: {\n    dense?: boolean;\n    cellBorder?: boolean;\n    rowBorder?: boolean;\n    rowRounded?: boolean;\n    stripped?: boolean;\n    headerBackground?: boolean;\n    headerBorder?: boolean;\n    headerSticky?: boolean;\n    width?: 'auto' | 'fixed';\n    columnsVisibility?: boolean;\n    columnsResizable?: boolean;\n    columnsPinnable?: boolean;\n    columnsMovable?: boolean;\n    columnsDraggable?: boolean;\n    rowsDraggable?: boolean;\n  };\n  tableClassNames?: {\n    base?: string;\n    header?: string;\n    headerRow?: string;\n    headerSticky?: string;\n    body?: string;\n    bodyRow?: string;\n    footer?: string;\n    edgeCell?: string;\n  };\n}\n\nconst DataGridContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  DataGridContextProps<any> | undefined\n>(undefined);\n\nfunction useDataGrid() {\n  const context = useContext(DataGridContext);\n  if (!context) {\n    throw new Error('useDataGrid must be used within a DataGridProvider');\n  }\n  return context;\n}\n\nfunction DataGridProvider<TData extends object>({\n  children,\n  table,\n  ...props\n}: DataGridProps<TData> & { table: Table<TData> }) {\n  return (\n    <DataGridContext.Provider\n      value={{\n        props,\n        table,\n        recordCount: props.recordCount,\n        isLoading: props.isLoading || false,\n      }}\n    >\n      {children}\n    </DataGridContext.Provider>\n  );\n}\n\nfunction DataGrid<TData extends object>({\n  children,\n  table,\n  ...props\n}: DataGridProps<TData>) {\n  const defaultProps: Partial<DataGridProps<TData>> = {\n    loadingMode: 'skeleton',\n    tableLayout: {\n      dense: false,\n      cellBorder: false,\n      rowBorder: true,\n      rowRounded: false,\n      stripped: false,\n      headerSticky: false,\n      headerBackground: true,\n      headerBorder: true,\n      width: 'fixed',\n      columnsVisibility: false,\n      columnsResizable: false,\n      columnsPinnable: false,\n      columnsMovable: false,\n      columnsDraggable: false,\n      rowsDraggable: false,\n    },\n    tableClassNames: {\n      base: '',\n      header: '',\n      headerRow: '',\n      headerSticky: 'sticky top-0 z-10 bg-background/90 backdrop-blur-xs',\n      body: '',\n      bodyRow: '',\n      footer: '',\n      edgeCell: '',\n    },\n  };\n\n  const mergedProps: DataGridProps<TData> = {\n    ...defaultProps,\n    ...props,\n    tableLayout: {\n      ...defaultProps.tableLayout,\n      ...(props.tableLayout || {}),\n    },\n    tableClassNames: {\n      ...defaultProps.tableClassNames,\n      ...(props.tableClassNames || {}),\n    },\n  };\n\n  // Ensure table is provided\n  if (!table) {\n    throw new Error('DataGrid requires a \"table\" prop');\n  }\n\n  return (\n    <DataGridProvider table={table} {...mergedProps}>\n      {children}\n    </DataGridProvider>\n  );\n}\n\nfunction DataGridContainer({\n  children,\n  className,\n  border = true,\n}: {\n  children: ReactNode;\n  className?: string;\n  border?: boolean;\n}) {\n  return (\n    <div\n      data-slot=\"data-grid\"\n      className={cn(\n        'grid w-full',\n        border && 'border border-border rounded-lg',\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport { useDataGrid, DataGridProvider, DataGrid, DataGridContainer };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/select.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { isValidElement, ReactNode } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport * as SelectPrimitive from '@radix-ui/react-select';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Check, ChevronDown, ChevronUp } from 'lucide-react';\n\n// Create a Context for `indicatorPosition` and `indicator` control\nconst SelectContext = React.createContext<{\n  indicatorPosition: 'left' | 'right';\n  indicatorVisibility: boolean;\n  indicator: ReactNode;\n}>({ indicatorPosition: 'left', indicator: null, indicatorVisibility: true });\n\n// Root Component\nconst Select = ({\n  indicatorPosition = 'left',\n  indicatorVisibility = true,\n  indicator,\n  ...props\n}: {\n  indicatorPosition?: 'left' | 'right';\n  indicatorVisibility?: boolean;\n  indicator?: ReactNode;\n} & React.ComponentProps<typeof SelectPrimitive.Root>) => {\n  return (\n    <SelectContext.Provider\n      value={{ indicatorPosition, indicatorVisibility, indicator }}\n    >\n      <SelectPrimitive.Root {...props} />\n    </SelectContext.Provider>\n  );\n};\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n}\n\n// Define size variants for SelectTrigger\nconst selectTriggerVariants = cva(\n  `\n    flex bg-background w-full items-center justify-between outline-none border border-input shadow-xs shadow-black/5 transition-shadow \n    text-foreground data-placeholder:text-muted-foreground focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px] \n    focus-visible:ring-ring/30 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 \n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20\n  `,\n  {\n    variants: {\n      size: {\n        sm: 'h-7 px-2.5 text-xs gap-1 rounded-md',\n        md: 'h-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) gap-1 rounded-md',\n        lg: 'h-10 px-4 text-sm gap-1.5 rounded-md',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nexport interface SelectTriggerProps\n  extends React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>,\n    VariantProps<typeof selectTriggerVariants> {}\n\nfunction SelectTrigger({\n  className,\n  children,\n  size,\n  ...props\n}: SelectTriggerProps) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      className={cn(selectTriggerVariants({ size }), className)}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDown className=\"h-4 w-4 opacity-60 -me-0.5\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUp className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDown className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover shadow-md shadow-black/5 text-secondary-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1.5 data-[side=left]:-translate-x-1.5 data-[side=right]:translate-x-1.5 data-[side=top]:-translate-y-1.5',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1.5',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  );\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\n        'py-1.5 ps-8 pe-2 text-xs text-muted-foreground font-medium',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>) {\n  const { indicatorPosition, indicatorVisibility, indicator } =\n    React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 text-sm outline-hidden text-foreground hover:bg-accent focus:bg-accent data-disabled:pointer-events-none data-disabled:opacity-50',\n        indicatorPosition === 'left' ? 'ps-8 pe-2' : 'pe-8 ps-2',\n        className,\n      )}\n      {...props}\n    >\n      {indicatorVisibility &&\n        (indicator && isValidElement(indicator) ? (\n          indicator\n        ) : (\n          <span\n            className={cn(\n              'absolute flex h-3.5 w-3.5 items-center justify-center',\n              indicatorPosition === 'left' ? 'start-2' : 'end-2',\n            )}\n          >\n            <SelectPrimitive.ItemIndicator>\n              <Check className=\"h-4 w-4 text-primary\" />\n            </SelectPrimitive.ItemIndicator>\n          </span>\n        ))}\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectIndicator({\n  children,\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof SelectPrimitive.ItemIndicator>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <span\n      data-slot=\"select-indicator\"\n      className={cn(\n        'absolute flex top-1/2 -translate-y-1/2 items-center justify-center',\n        indicatorPosition === 'left' ? 'start-2' : 'end-2',\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitive.ItemIndicator>{children}</SelectPrimitive.ItemIndicator>\n    </span>\n  );\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('-mx-1.5 my-1.5 h-px bg-border', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectIndicator,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/skeleton.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn('animate-pulse rounded-md bg-accent', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
