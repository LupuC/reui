{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs-pill",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-tabs",
    "lucide-react"
  ],
  "registryDependencies": ["https://reui.io/r/badge.json", "https://reui.io/r/tabs.json"],
  "files": [
    {
      "path": "registry/default/components/tabs/pill.tsx",
      "content": "import { Badge } from '@/registry/default/ui/badge';\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@/registry/default/ui/tabs';\nimport { Bell, UserRound } from 'lucide-react';\n\nexport default function TabsDemo() {\n  return (\n    <Tabs\n      defaultValue=\"profile\"\n      className=\"w-[375px] text-sm text-muted-foreground\"\n    >\n      <TabsList className=\"grid w-full grid-cols-2\" shape=\"pill\">\n        <TabsTrigger value=\"profile\">\n          <UserRound /> Profile\n        </TabsTrigger>\n        <TabsTrigger value=\"notifications\">\n          <Bell />\n          Notifications\n          <Badge variant=\"destructive\" shape=\"circle\" size=\"xs\">\n            5\n          </Badge>\n        </TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"profile\">Content for Profile</TabsContent>\n      <TabsContent value=\"notifications\">Content for Notifications</TabsContent>\n    </Tabs>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/badge.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n  dotClassName?: string;\n  disabled?: boolean;\n}\n\nexport interface BadgeButtonProps\n  extends React.ButtonHTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeButtonVariants> {\n  asChild?: boolean;\n}\n\nexport type BadgeDotProps = React.HTMLAttributes<HTMLSpanElement>;\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center border font-medium focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 [&_svg]:-ms-px [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground',\n        secondary: 'bg-secondary text-secondary-foreground',\n        success: 'bg-green-500 text-white',\n        warning: 'bg-yellow-500 text-white',\n        info: 'bg-violet-500 text-white',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black',\n        destructive: 'bg-destructive text-destructive-foreground',\n      },\n      appearance: {\n        solid: 'border-transparent',\n        outline: '',\n        light: '',\n        stroke: 'bg-transparent border border-border text-secondary-foreground',\n        ghost: 'border-transparent bg-transparent',\n      },\n      disabled: {\n        true: 'opacity-50 pointer-events-none',\n      },\n      size: {\n        lg: 'rounded-md px-[0.5rem] h-7 min-w-7 gap-1.5 text-xs [&_svg]:size-3.5',\n        md: 'rounded-md px-[0.45rem] h-6 min-w-6 gap-1.5 text-xs [&_svg]:size-3.5 ',\n        sm: 'rounded-sm px-[0.325rem] h-5 min-w-5 gap-1 text-[0.6875rem] leading-[0.75rem] [&_svg]:size-3',\n        xs: 'rounded-sm px-[0.25rem] h-4 min-w-4 gap-1 text-[0.625rem] leading-[0.5rem] [&_svg]:size-3',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n    },\n    compoundVariants: [\n      {\n        variant: 'primary',\n        appearance: 'outline',\n        className: 'bg-primary/10 border-primary/10 text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'outline',\n        className:\n          'bg-secondary dark:bg-secondary/50 border-border text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'outline',\n        className:\n          'border bg-green-100 text-green-700 border-green-200 dark:text-green-600 dark:bg-green-950/50 dark:border-green-950',\n      },\n      {\n        variant: 'warning',\n        appearance: 'outline',\n        className:\n          'border bg-yellow-100 text-yellow-700 border-yellow-200 dark:text-yellow-600 dark:bg-yellow-950/50 dark:border-yellow-950',\n      },\n      {\n        variant: 'info',\n        appearance: 'outline',\n        className:\n          'border bg-violet-100 text-violet-700 border-violet-200 dark:text-violet-600 dark:bg-violet-950/50 dark:border-violet-950',\n      },\n      {\n        variant: 'mono',\n        appearance: 'outline',\n        className:\n          'bg-zinc-100 dark:bg-zinc-300/10 border-zinc-300 dark:border-zinc-300/10 text-zinc-950 dark:text-zinc-200',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'outline',\n        className: 'bg-destructive/10 border-destructive/10 text-destructive',\n      },\n\n      {\n        variant: 'primary',\n        appearance: 'light',\n        className: 'bg-primary/10 text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'light',\n        className:\n          'bg-secondary dark:bg-secondary/50 text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'light',\n        className:\n          'border bg-green-100 text-green-700 dark:text-green-600 dark:bg-green-950/50',\n      },\n      {\n        variant: 'warning',\n        appearance: 'light',\n        className:\n          'border bg-yellow-100 text-yellow-700 dark:text-yellow-600 dark:bg-yellow-950/50',\n      },\n      {\n        variant: 'info',\n        appearance: 'light',\n        className:\n          'border bg-violet-100 text-violet-700 dark:text-violet-600 dark:bg-violet-950/50',\n      },\n      {\n        variant: 'mono',\n        appearance: 'light',\n        className:\n          'bg-zinc-200 dark:bg-zinc-300/10 text-zinc-950 dark:text-zinc-200',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'light',\n        className: 'bg-destructive/10 text-destructive',\n      },\n\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'ghost',\n        className: 'text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'ghost',\n        className: 'text-green-500',\n      },\n      {\n        variant: 'warning',\n        appearance: 'ghost',\n        className: 'text-yellow-500',\n      },\n      { variant: 'info', appearance: 'ghost', className: 'text-violet-500' },\n      { variant: 'mono', appearance: 'ghost', className: 'text-foreground' },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'text-destructive',\n      },\n\n      { size: 'lg', appearance: 'ghost', className: 'px-0' },\n      { size: 'md', appearance: 'ghost', className: 'px-0' },\n      { size: 'sm', appearance: 'ghost', className: 'px-0' },\n      { size: 'xs', appearance: 'ghost', className: 'px-0' },\n    ],\n    defaultVariants: {\n      variant: 'secondary',\n      appearance: 'solid',\n      size: 'md',\n    },\n  },\n);\n\nconst badgeButtonVariants = cva(\n  'cursor-pointer transition-all inline-flex items-center justify-center leading-none size-3.5 [&>svg]:opacity-100! [&>svg]:size-3.5 p-0 rounded-md -me-0.5 opacity-60 hover:opacity-100',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  size,\n  appearance,\n  shape,\n  asChild = false,\n  disabled,\n  ...props\n}: BadgeProps) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(\n        badgeVariants({ variant, size, appearance, shape, disabled }),\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction BadgeButton({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: BadgeButtonProps) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      data-slot=\"badge-button\"\n      className={cn(badgeButtonVariants({ variant, className }))}\n      role=\"button\"\n      {...props}\n    />\n  );\n}\n\nfunction BadgeDot({ className, ...props }: BadgeDotProps) {\n  return (\n    <span\n      data-slot=\"badge-dot\"\n      className={cn(\n        'size-1.5 rounded-full bg-[currentColor] opacity-75',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, BadgeButton, BadgeDot, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/tabs.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Variants for TabsList\nconst tabsListVariants = cva('flex items-center shrink-0', {\n  variants: {\n    variant: {\n      default: 'bg-accent p-1',\n      button: '',\n      line: 'border-b border-border',\n    },\n    shape: {\n      default: '',\n      pill: '',\n    },\n    size: {\n      lg: 'gap-2.5',\n      md: 'gap-2',\n      sm: 'gap-1.5',\n      xs: 'gap-1',\n    },\n  },\n  compoundVariants: [\n    { variant: 'default', size: 'lg', className: 'p-1.5 gap-2.5' },\n    { variant: 'default', size: 'md', className: 'p-1 gap-2' },\n    { variant: 'default', size: 'sm', className: 'p-1 gap-1.5' },\n    { variant: 'default', size: 'xs', className: 'p-1 gap-1' },\n\n    {\n      variant: 'default',\n      shape: 'default',\n      size: 'lg',\n      className: 'rounded-lg',\n    },\n    {\n      variant: 'default',\n      shape: 'default',\n      size: 'md',\n      className: 'rounded-lg',\n    },\n    {\n      variant: 'default',\n      shape: 'default',\n      size: 'sm',\n      className: 'rounded-md',\n    },\n    {\n      variant: 'default',\n      shape: 'default',\n      size: 'xs',\n      className: 'rounded-md',\n    },\n\n    { variant: 'line', size: 'lg', className: 'gap-9' },\n    { variant: 'line', size: 'md', className: 'gap-8' },\n    { variant: 'line', size: 'sm', className: 'gap-4' },\n    { variant: 'line', size: 'xs', className: 'gap-4' },\n\n    {\n      variant: 'default',\n      shape: 'pill',\n      className: 'rounded-full [&_[role=tab]]:rounded-full',\n    },\n    {\n      variant: 'button',\n      shape: 'pill',\n      className: 'rounded-full [&_[role=tab]]:rounded-full',\n    },\n  ],\n  defaultVariants: {\n    variant: 'default',\n    size: 'md',\n  },\n});\n\n// Variants for TabsTrigger\nconst tabsTriggerVariants = cva(\n  'shrink-0 cursor-pointer whitespace-nowrap inline-flex justify-center items-center font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-disabled:pointer-events-none data-disabled:opacity-50 [&_svg]:shrink-0 [&_svg]:text-muted-foreground [&:hover_svg]:text-primary [&[data-state=active]_svg]:text-primary',\n  {\n    variants: {\n      variant: {\n        default:\n          'text-muted-foreground data-[state=active]:bg-background hover:text-foreground data-[state=active]:text-foreground data-[state=active]:shadow-xs data-[state=active]:shadow-black/5',\n        button:\n          'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 rounded-lg text-accent-foreground hover:text-foreground data-[state=active]:bg-accent data-[state=active]:text-foreground',\n        line: 'border-b-2 text-muted-foreground border-transparent data-[state=active]:border-primary hover:text-primary data-[state=active]:text-primary data-[state=active]:border-primary data-[state=active]:text-primary',\n      },\n      size: {\n        lg: 'gap-2.5 [&_svg]:size-5 text-sm',\n        md: 'gap-2 [&_svg]:size-4 text-sm',\n        sm: 'gap-1.5 [&_svg]:size-3.5 text-xs',\n        xs: 'gap-1 [&_svg]:size-3.5 text-xs',\n      },\n    },\n    compoundVariants: [\n      { variant: 'default', size: 'lg', className: 'py-2.5 px-4 rounded-md' },\n      { variant: 'default', size: 'md', className: 'py-1.5 px-3 rounded-md' },\n      { variant: 'default', size: 'sm', className: 'py-1.5 px-2.5 rounded-sm' },\n      { variant: 'default', size: 'xs', className: 'py-1 px-2 rounded-sm' },\n\n      { variant: 'button', size: 'lg', className: 'py-3 px-4 rounded-lg' },\n      { variant: 'button', size: 'md', className: 'py-2.5 px-3 rounded-lg' },\n      { variant: 'button', size: 'sm', className: 'py-2 px-2.5 rounded-md' },\n      { variant: 'button', size: 'xs', className: 'py-1.5 px-2 rounded-md' },\n\n      { variant: 'line', size: 'lg', className: 'py-3' },\n      { variant: 'line', size: 'md', className: 'py-2.5' },\n      { variant: 'line', size: 'sm', className: 'py-2' },\n      { variant: 'line', size: 'xs', className: 'py-1.5' },\n    ],\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n    },\n  },\n);\n\n// Variants for TabsContent\nconst tabsContentVariants = cva(\n  'mt-2.5 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\n// Context\ntype TabsContextType = {\n  variant?: 'default' | 'button' | 'line';\n  size?: 'lg' | 'sm' | 'xs' | 'md';\n};\nconst TabsContext = React.createContext<TabsContextType>({\n  variant: 'default',\n  size: 'md',\n});\n\n// Components\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn('', className)}\n      {...props}\n    />\n  );\n}\n\nfunction TabsList({\n  className,\n  variant = 'default',\n  shape = 'default',\n  size = 'md',\n  ...props\n}: React.ComponentPropsWithoutRef<typeof TabsPrimitive.List> &\n  VariantProps<typeof tabsListVariants>) {\n  return (\n    <TabsContext.Provider\n      value={{ variant: variant || 'default', size: size || 'md' }}\n    >\n      <TabsPrimitive.List\n        data-slot=\"tabs-list\"\n        className={cn(tabsListVariants({ variant, shape, size }), className)}\n        {...props}\n      />\n    </TabsContext.Provider>\n  );\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>) {\n  const { variant, size } = React.useContext(TabsContext);\n\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(tabsTriggerVariants({ variant, size }), className)}\n      {...props}\n    />\n  );\n}\n\nfunction TabsContent({\n  className,\n  variant,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content> &\n  VariantProps<typeof tabsContentVariants>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(tabsContentVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Tabs, TabsContent, TabsList, TabsTrigger };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
