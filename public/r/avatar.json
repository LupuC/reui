{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-avatar",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-avatar",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/default/ui/avatar.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport * as AvatarPrimitive from '@radix-ui/react-avatar';\nimport { cva, VariantProps } from 'class-variance-authority';\n\nconst avatarStatusVariants = cva(\n  'flex items-center rounded-full size-2 border-2 border-background',\n  {\n    variants: {\n      variant: {\n        online: 'bg-green-600',\n        offline: 'bg-zinc-600 dark:bg-zinc-300',\n        busy: 'bg-yellow-600',\n        away: 'bg-blue-600',\n      },\n    },\n    defaultVariants: {\n      variant: 'online',\n    },\n  },\n);\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn('relative flex shrink-0 size-10', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>) {\n  return (\n    <div className={cn('relative overflow-hidden rounded-full', className)}>\n      <AvatarPrimitive.Image\n        data-slot=\"avatar-image\"\n        className={cn('aspect-square h-full w-full')}\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'flex h-full w-full items-center justify-center rounded-full border border-border bg-accent text-accent-foreground text-xs',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarIndicator({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"avatar-indicator\"\n      className={cn(\n        'absolute flex size-6 items-center justify-center',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarStatus({\n  className,\n  variant,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> &\n  VariantProps<typeof avatarStatusVariants>) {\n  return (\n    <div\n      data-slot=\"avatar-status\"\n      className={cn(avatarStatusVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n  AvatarIndicator,\n  AvatarStatus,\n  avatarStatusVariants,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
