{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion-menu-sub-menu",
  "type": "registry:component",
  "dependencies": [
    "@remixicon/react",
    "sonner",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-accordion",
    "class-variance-authority",
    "lucide-react",
    "@radix-ui/react-slot",
    "@remixicon/react",
    "sonner"
  ],
  "registryDependencies": [
    "https://reui.io/r/accordion-menu.json",
    "https://reui.io/r/alert.json",
    "https://reui.io/r/badge.json"
  ],
  "files": [
    {
      "path": "registry/default/components/accordion-menu/sub-menu.tsx",
      "content": "'use client';\n\nimport {\n  AccordionMenu,\n  AccordionMenuGroup,\n  AccordionMenuIndicator,\n  AccordionMenuItem,\n  AccordionMenuLabel,\n  AccordionMenuSeparator,\n  AccordionMenuSub,\n  AccordionMenuSubContent,\n  AccordionMenuSubTrigger,\n} from '@/registry/default/ui/accordion-menu';\nimport { Alert, AlertIcon, AlertTitle } from '@/registry/default/ui/alert';\nimport { Badge } from '@/registry/default/ui/badge';\nimport { RiCheckboxCircleFill } from '@remixicon/react';\nimport { Briefcase, LifeBuoy, Mail, Settings, User } from 'lucide-react';\nimport { toast } from 'sonner';\n\nexport default function AccordionMenuWithSubmenusDemo() {\n  return (\n    <div className=\"w-full md:w-[250px] overflow-hidden border border-border rounded-md p-2\">\n      <AccordionMenu\n        type=\"single\"\n        collapsible\n        defaultValue=\"preferences\"\n        selectedValue=\"preferences-general\"\n        classNames={{\n          separator: '-mx-2 mb-2.5',\n        }}\n      >\n        {/* Main Menu Label */}\n        <AccordionMenuLabel>Navigation</AccordionMenuLabel>\n        <AccordionMenuSeparator />\n\n        <AccordionMenuGroup>\n          {/* Single Menu Item: Account Overview */}\n          <AccordionMenuItem\n            value=\"overview\"\n            onClick={() =>\n              toast.custom((t) => (\n                <Alert\n                  variant=\"mono\"\n                  icon=\"primary\"\n                  onClose={() => toast.dismiss(t)}\n                >\n                  <AlertIcon>\n                    <RiCheckboxCircleFill />\n                  </AlertIcon>\n                  <AlertTitle>Account Overview clicked</AlertTitle>\n                </Alert>\n              ))\n            }\n          >\n            <User />\n            <span>Account Overview</span>\n          </AccordionMenuItem>\n\n          {/* Menu Item with Submenu: Message Center */}\n          <AccordionMenuSub value=\"messages\">\n            <AccordionMenuSubTrigger>\n              <Mail />\n              <span>Message Center</span>\n              <AccordionMenuIndicator />\n            </AccordionMenuSubTrigger>\n            <AccordionMenuSubContent\n              type=\"single\"\n              collapsible\n              parentValue=\"messages\"\n            >\n              <AccordionMenuGroup>\n                <AccordionMenuItem\n                  value=\"inbox\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <RiCheckboxCircleFill />\n                        </AlertIcon>\n                        <AlertTitle>Inbox clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>Inbox</span>\n                </AccordionMenuItem>\n                <AccordionMenuItem\n                  value=\"sent\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <RiCheckboxCircleFill />\n                        </AlertIcon>\n                        <AlertTitle>Sent Items clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>Sent Items</span>\n                </AccordionMenuItem>\n                <AccordionMenuItem\n                  value=\"drafts\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <RiCheckboxCircleFill />\n                        </AlertIcon>\n                        <AlertTitle>Drafts clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>Drafts</span>\n                </AccordionMenuItem>\n                <AccordionMenuItem\n                  value=\"spam\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"destructive\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <RiCheckboxCircleFill />\n                        </AlertIcon>\n                        <AlertTitle>Spam clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>Spam</span>\n                </AccordionMenuItem>\n              </AccordionMenuGroup>\n            </AccordionMenuSubContent>\n          </AccordionMenuSub>\n\n          {/* Menu Item with Submenu: Preferences */}\n          <AccordionMenuSub value=\"preferences\">\n            <AccordionMenuSubTrigger>\n              <Settings />\n              <span>Preferences</span>\n              <AccordionMenuIndicator />\n            </AccordionMenuSubTrigger>\n            <AccordionMenuSubContent\n              type=\"multiple\"\n              collapsible\n              parentValue=\"preferences\"\n            >\n              <AccordionMenuGroup>\n                <AccordionMenuItem\n                  value=\"preferences-general\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <RiCheckboxCircleFill />\n                        </AlertIcon>\n                        <AlertTitle>General Settings clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>General</span>\n                </AccordionMenuItem>\n                <AccordionMenuItem\n                  value=\"preferences-privacy\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <RiCheckboxCircleFill />\n                        </AlertIcon>\n                        <AlertTitle>Privacy Settings clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>Privacy</span>\n                </AccordionMenuItem>\n                <AccordionMenuItem\n                  value=\"preferences-notifications\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <RiCheckboxCircleFill />\n                        </AlertIcon>\n                        <AlertTitle>Notifications clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>Notifications</span>\n                </AccordionMenuItem>\n                <AccordionMenuItem\n                  value=\"preferences-display\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <RiCheckboxCircleFill />\n                        </AlertIcon>\n                        <AlertTitle>Display Settings clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>Display</span>\n                </AccordionMenuItem>\n                <AccordionMenuItem\n                  value=\"preferences-language\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <RiCheckboxCircleFill />\n                        </AlertIcon>\n                        <AlertTitle>Language Settings clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>Language</span>\n                </AccordionMenuItem>\n              </AccordionMenuGroup>\n            </AccordionMenuSubContent>\n          </AccordionMenuSub>\n\n          {/* Single Menu Item: Company Info */}\n          <AccordionMenuItem\n            value=\"companyInfo\"\n            onClick={() =>\n              toast.custom((t) => (\n                <Alert\n                  variant=\"mono\"\n                  icon=\"primary\"\n                  onClose={() => toast.dismiss(t)}\n                >\n                  <AlertIcon>\n                    <Briefcase />\n                  </AlertIcon>\n                  <AlertTitle>Company Info clicked</AlertTitle>\n                </Alert>\n              ))\n            }\n          >\n            <Briefcase />\n            <span>Company Info</span>\n            <AccordionMenuIndicator>\n              <Badge size=\"sm\">5</Badge>\n            </AccordionMenuIndicator>\n          </AccordionMenuItem>\n\n          {/* Menu Item with Submenu: Support Center */}\n          <AccordionMenuSub value=\"support\">\n            <AccordionMenuSubTrigger>\n              <LifeBuoy />\n              <span>Support Center</span>\n              <AccordionMenuIndicator />\n            </AccordionMenuSubTrigger>\n            <AccordionMenuSubContent\n              type=\"single\"\n              collapsible\n              parentValue=\"support\"\n            >\n              <AccordionMenuGroup>\n                <AccordionMenuItem\n                  value=\"faq\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <LifeBuoy />\n                        </AlertIcon>\n                        <AlertTitle>FAQ clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>FAQ</span>\n                </AccordionMenuItem>\n                <AccordionMenuItem\n                  value=\"contact\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <LifeBuoy />\n                        </AlertIcon>\n                        <AlertTitle>Contact Us clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>Contact Us</span>\n                </AccordionMenuItem>\n                <AccordionMenuItem\n                  value=\"support-tickets\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <LifeBuoy />\n                        </AlertIcon>\n                        <AlertTitle>Support Tickets clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>Support Tickets</span>\n                </AccordionMenuItem>\n                <AccordionMenuItem\n                  value=\"live-chat\"\n                  onClick={() =>\n                    toast.custom((t) => (\n                      <Alert\n                        variant=\"mono\"\n                        icon=\"primary\"\n                        onClose={() => toast.dismiss(t)}\n                      >\n                        <AlertIcon>\n                          <LifeBuoy />\n                        </AlertIcon>\n                        <AlertTitle>Live Chat clicked</AlertTitle>\n                      </Alert>\n                    ))\n                  }\n                >\n                  <span>Live Chat</span>\n                </AccordionMenuItem>\n              </AccordionMenuGroup>\n            </AccordionMenuSubContent>\n          </AccordionMenuSub>\n        </AccordionMenuGroup>\n      </AccordionMenu>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/accordion-menu.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport * as AccordionPrimitive from '@radix-ui/react-accordion';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown } from 'lucide-react';\n\ninterface AccordionMenuContextValue {\n  matchPath: (href: string) => boolean;\n  selectedValue: string | undefined;\n  setSelectedValue: React.Dispatch<React.SetStateAction<string | undefined>>;\n  classNames?: AccordionMenuClassNames;\n  nestedStates: Record<string, string | string[]>;\n  setNestedStates: React.Dispatch<\n    React.SetStateAction<Record<string, string | string[]>>\n  >;\n  onItemClick?: (value: string, event: React.MouseEvent) => void;\n}\n\ninterface AccordionMenuClassNames {\n  root?: string;\n  group?: string;\n  label?: string;\n  separator?: string;\n  item?: string;\n  sub?: string;\n  subTrigger?: string;\n  subContent?: string;\n  subWrapper?: string;\n  indicator?: string;\n}\n\ninterface AccordionMenuProps {\n  selectedValue?: string;\n  matchPath?: (href: string) => boolean;\n  classNames?: AccordionMenuClassNames;\n  onItemClick?: (value: string, event: React.MouseEvent) => void;\n}\n\nconst AccordionMenuContext = React.createContext<AccordionMenuContextValue>({\n  matchPath: () => false,\n  selectedValue: '',\n  setSelectedValue: () => {},\n  nestedStates: {},\n  setNestedStates: () => {},\n});\n\nfunction AccordionMenu({\n  className,\n  matchPath = () => false,\n  classNames,\n  children,\n  selectedValue,\n  onItemClick,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root> &\n  AccordionMenuProps) {\n  const [internalSelectedValue, setInternalSelectedValue] = React.useState<\n    string | undefined\n  >(selectedValue);\n  React.useEffect(() => {\n    setInternalSelectedValue(selectedValue);\n  }, [selectedValue]);\n\n  const initialNestedStates = React.useMemo(() => {\n    const getActiveChain = (\n      nodes: React.ReactNode,\n      chain: string[] = [],\n    ): string[] => {\n      let result: string[] = [];\n      React.Children.forEach(nodes, (node) => {\n        if (React.isValidElement(node)) {\n          const { value, children } = node.props as {\n            value?: string;\n            children?: React.ReactNode;\n          };\n          const newChain = value ? [...chain, value] : chain;\n          if (value && (value === selectedValue || matchPath(value))) {\n            result = newChain;\n          } else if (children) {\n            const childChain = getActiveChain(children, newChain);\n            if (childChain.length > 0) {\n              result = childChain;\n            }\n          }\n        }\n      });\n      return result;\n    };\n\n    const chain = getActiveChain(children);\n    const trimmedChain =\n      chain.length > 1 ? chain.slice(0, chain.length - 1) : chain;\n    const mapping: Record<string, string | string[]> = {};\n    if (trimmedChain.length > 0) {\n      if (props.type === 'multiple') {\n        mapping['root'] = trimmedChain;\n      } else {\n        mapping['root'] = trimmedChain[0];\n        for (let i = 0; i < trimmedChain.length - 1; i++) {\n          mapping[trimmedChain[i]] = trimmedChain[i + 1];\n        }\n      }\n    }\n    return mapping;\n  }, [children, matchPath, selectedValue, props.type]);\n\n  const [nestedStates, setNestedStates] =\n    React.useState<Record<string, string | string[]>>(initialNestedStates);\n  const multipleValue = (\n    Array.isArray(nestedStates['root'])\n      ? nestedStates['root']\n      : typeof nestedStates['root'] === 'string'\n        ? [nestedStates['root']]\n        : []\n  ) as string[];\n  const singleValue = (nestedStates['root'] ?? '') as string;\n\n  return (\n    <AccordionMenuContext.Provider\n      value={{\n        matchPath,\n        selectedValue: internalSelectedValue,\n        setSelectedValue: setInternalSelectedValue,\n        classNames,\n        onItemClick,\n        nestedStates,\n        setNestedStates,\n      }}\n    >\n      {props.type === 'single' ? (\n        <AccordionPrimitive.Root\n          data-slot=\"accordion-menu\"\n          value={singleValue}\n          className={cn('w-full', classNames?.root, className)}\n          onValueChange={(value: string) =>\n            setNestedStates((prev) => ({ ...prev, root: value }))\n          }\n          {...props}\n          role=\"menu\"\n        >\n          {children}\n        </AccordionPrimitive.Root>\n      ) : (\n        <AccordionPrimitive.Root\n          data-slot=\"accordion-menu\"\n          value={multipleValue}\n          className={cn('w-full', classNames?.root, className)}\n          onValueChange={(value: string | string[]) =>\n            setNestedStates((prev) => ({ ...prev, root: value }))\n          }\n          {...props}\n          role=\"menu\"\n        >\n          {children}\n        </AccordionPrimitive.Root>\n      )}\n    </AccordionMenuContext.Provider>\n  );\n}\n\ntype AccordionMenuGroupProps = React.ComponentPropsWithoutRef<'div'>;\n\nfunction AccordionMenuGroup({\n  children,\n  className,\n  ...props\n}: AccordionMenuGroupProps) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n  return (\n    <div\n      data-slot=\"accordion-menu-group\"\n      role=\"group\"\n      className={cn('space-y-0.5', classNames?.group, className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\ntype AccordionMenuLabelProps = React.ComponentPropsWithoutRef<'div'>;\n\nfunction AccordionMenuLabel({\n  children,\n  className,\n  ...props\n}: AccordionMenuLabelProps) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n\n  return (\n    <div\n      data-slot=\"accordion-menu-label\"\n      role=\"presentation\"\n      className={cn(\n        'px-2 py-1.5 text-xs font-medium text-muted-foreground',\n        classNames?.label,\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\ntype AccordionMenuSeparatorProps = React.ComponentPropsWithoutRef<'div'>;\n\nfunction AccordionMenuSeparator({\n  className,\n  ...props\n}: AccordionMenuSeparatorProps) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n  return (\n    <div\n      data-slot=\"accordion-menu-separator\"\n      role=\"separator\"\n      className={cn('my-1 h-px bg-border', classNames?.separator, className)}\n      {...props}\n    />\n  );\n}\n\nconst itemVariants = cva(\n  'relative cursor-pointer select-none flex w-full text-start items-center text-foreground rounded-lg gap-2 px-2 py-1.5 text-sm outline-hidden transition-colors hover:bg-accent hover:text-accent-foreground data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground disabled:opacity-50 disabled:bg-transparent focus-visible:bg-accent focus-visible:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0 [&_a]:flex [&_a,&>div]:w-full [&_a,&>div]:items-center [&_a,&>div]:gap-2',\n  {\n    variants: {\n      variant: {\n        default: '',\n        destructive:\n          'text-destructive hover:text-destructive focus:text-destructive hover:bg-destructive/5 focus:bg-destructive/5 data-[active=true]:bg-destructive/5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction AccordionMenuItem({\n  className,\n  children,\n  variant,\n  asChild,\n  onClick,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> &\n  VariantProps<typeof itemVariants> & {\n    onClick?: React.MouseEventHandler<HTMLElement>;\n  }) {\n  const { classNames, selectedValue, matchPath, onItemClick } =\n    React.useContext(AccordionMenuContext);\n  return (\n    <AccordionPrimitive.Item className=\"flex\" {...props}>\n      <AccordionPrimitive.Header className=\"flex w-full\">\n        <AccordionPrimitive.Trigger\n          asChild={asChild}\n          data-slot=\"accordion-menu-item\"\n          className={cn(itemVariants({ variant }), classNames?.item, className)}\n          onClick={(e) => {\n            if (onItemClick) {\n              onItemClick(props.value, e);\n            }\n\n            if (onClick) {\n              onClick(e);\n            }\n            e.preventDefault();\n          }}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              e.preventDefault();\n              const target = e.currentTarget as HTMLElement;\n              const firstChild = target.firstElementChild as HTMLElement | null;\n              if (firstChild) {\n                firstChild.click();\n              }\n            }\n          }}\n          data-selected={\n            matchPath(props.value as string) || selectedValue === props.value\n              ? 'true'\n              : undefined\n          }\n        >\n          {children}\n        </AccordionPrimitive.Trigger>\n      </AccordionPrimitive.Header>\n    </AccordionPrimitive.Item>\n  );\n}\n\nfunction AccordionMenuSub({\n  className,\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-menu-sub\"\n      className={cn(classNames?.sub, className)}\n      {...props}\n    >\n      {children}\n    </AccordionPrimitive.Item>\n  );\n}\n\nfunction AccordionMenuSubTrigger({\n  className,\n  children,\n}: React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-menu-sub-trigger\"\n        className={cn(\n          'w-full relative flex items-center cursor-pointer select-none text-start rounded-lg gap-2 px-2 py-1.5 text-sm outline-hidden text-foreground transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:bg-accent focus-visible:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n          classNames?.subTrigger,\n          className,\n        )}\n      >\n        <>\n          {children}\n          <ChevronDown\n            data-slot=\"accordion-menu-sub-indicator\"\n            className={cn(\n              'ms-auto size-3.5! shrink-0 text-muted-foreground transition-transform duration-200 [[data-state=open]>&]:-rotate-180',\n            )}\n          />\n        </>\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  );\n}\n\ntype AccordionMenuSubContentProps = (\n  | (React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> & {\n      type: 'single';\n      collapsible: boolean;\n      defaultValue?: string;\n    })\n  | (React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> & {\n      type: 'multiple';\n      collapsible?: boolean;\n      defaultValue?: string | string[];\n    })\n) & {\n  parentValue: string;\n};\n\nfunction AccordionMenuSubContent({\n  className,\n  children,\n  type,\n  collapsible,\n  defaultValue,\n  parentValue,\n  ...props\n}: AccordionMenuSubContentProps) {\n  const { nestedStates, setNestedStates, classNames } =\n    React.useContext(AccordionMenuContext);\n  let currentValue;\n  if (type === 'multiple') {\n    const stateValue = nestedStates[parentValue];\n    if (Array.isArray(stateValue)) {\n      currentValue = stateValue;\n    } else if (typeof stateValue === 'string') {\n      currentValue = [stateValue];\n    } else if (defaultValue) {\n      currentValue = Array.isArray(defaultValue)\n        ? defaultValue\n        : [defaultValue];\n    } else {\n      currentValue = [];\n    }\n  } else {\n    currentValue = nestedStates[parentValue] ?? defaultValue ?? '';\n  }\n\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-menu-sub-content\"\n      className={cn(\n        'ps-5',\n        'overflow-hidden transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down',\n        classNames?.subContent,\n        className,\n      )}\n      {...props}\n    >\n      {type === 'multiple' ? (\n        <AccordionPrimitive.Root\n          className={cn('w-full py-0.5', classNames?.subWrapper)}\n          type=\"multiple\"\n          value={currentValue as string[]}\n          role=\"menu\"\n          data-slot=\"accordion-menu-sub-wrapper\"\n          onValueChange={(value: string | string[]) => {\n            const newValue = Array.isArray(value) ? value : [value];\n            setNestedStates((prev) => ({ ...prev, [parentValue]: newValue }));\n          }}\n        >\n          {children}\n        </AccordionPrimitive.Root>\n      ) : (\n        <AccordionPrimitive.Root\n          className={cn('w-full py-0.5', classNames?.subWrapper)}\n          type=\"single\"\n          collapsible={collapsible}\n          value={currentValue as string}\n          role=\"menu\"\n          data-slot=\"accordion-menu-sub-wrapper\"\n          onValueChange={(value: string | string[]) =>\n            setNestedStates((prev) => ({ ...prev, [parentValue]: value }))\n          }\n        >\n          {children}\n        </AccordionPrimitive.Root>\n      )}\n    </AccordionPrimitive.Content>\n  );\n}\n\ntype AccordionMenuIndicatorProps = React.ComponentPropsWithoutRef<'span'>;\n\nfunction AccordionMenuIndicator({\n  className,\n  ...props\n}: AccordionMenuIndicatorProps) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n  return (\n    <span\n      aria-hidden=\"true\"\n      data-slot=\"accordion-menu-indicator\"\n      className={cn(\n        'ms-auto flex items-center font-medium',\n        classNames?.indicator,\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  AccordionMenu,\n  AccordionMenuGroup,\n  AccordionMenuIndicator,\n  AccordionMenuItem,\n  AccordionMenuLabel,\n  AccordionMenuSeparator,\n  AccordionMenuSub,\n  AccordionMenuSubContent,\n  AccordionMenuSubTrigger,\n  type AccordionMenuClassNames,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/alert.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Button } from '@/registry/default/ui/button';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\nconst alertVariants = cva(\n  'flex items-stretch w-full gap-2 group-[.toaster]:w-(--width)',\n  {\n    variants: {\n      variant: {\n        secondary: '',\n        primary: '',\n        destructive: '',\n        success: '',\n        info: '',\n        mono: '',\n        warning: '',\n      },\n      icon: {\n        primary: '',\n        destructive: '',\n        success: '',\n        info: '',\n        warning: '',\n      },\n      appearance: {\n        solid: '',\n        outline: '',\n        light: '',\n        stroke: 'text-foreground',\n      },\n      size: {\n        lg: 'rounded-lg p-4 gap-3 text-base [&>[data-slot=alert-icon]>svg]:size-6 *:data-slot=alert-icon:mt-0 *:data-slot=alert-close:mt-0.5 *:data-slot=alert-close:-me-0.5',\n        md: 'rounded-lg p-3.5 gap-2.5 text-sm [&>[data-slot=alert-icon]>svg]:size-5 *:data-slot=alert-icon:mt-0 *:data-slot=alert-close:-me-0.5',\n        sm: 'rounded-md px-3 py-2.5 gap-2 text-xs [&>[data-slot=alert-icon]>svg]:size-4 *:data-alert-icon:mt-0.5 *:data-slot=alert-close:-me-0.5 [&>[data-slot=alert-close]>svg]:size-3.5!',\n      },\n    },\n    compoundVariants: [\n      {\n        variant: 'secondary',\n        appearance: 'solid',\n        className:\n          'bg-muted text-foreground *:data-alert-close:text-foreground',\n      },\n      {\n        variant: 'primary',\n        appearance: 'solid',\n        className:\n          'bg-primary text-primary-foreground *:data-alert-close:text-primary-foreground',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'solid',\n        className:\n          'bg-destructive text-destructive-foreground *:data-alert-close:text-destructive-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'solid',\n        className: 'bg-green-500 text-white *:data-alert-close:text-white',\n      },\n      {\n        variant: 'info',\n        appearance: 'solid',\n        className: 'bg-violet-600 text-white *:data-alert-close:text-white',\n      },\n      {\n        variant: 'warning',\n        appearance: 'solid',\n        className: 'bg-yellow-500 text-white *:data-alert-close:text-white',\n      },\n      {\n        variant: 'mono',\n        appearance: 'solid',\n        className:\n          'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black *:data-alert-close:text-white dark:*:data-alert-close:text-black',\n      },\n\n      {\n        variant: 'secondary',\n        appearance: 'outline',\n        className:\n          'border border-border bg-background text-foreground *:data-alert-close:text-foreground',\n      },\n      {\n        variant: 'primary',\n        appearance: 'outline',\n        className:\n          'border border-border bg-background text-primary *:data-alert-close:text-foreground',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'outline',\n        className:\n          'border border-border bg-background text-destructive *:data-alert-close:text-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'outline',\n        className:\n          'border border-border bg-background text-green-500 *:data-alert-close:text-foreground',\n      },\n      {\n        variant: 'info',\n        appearance: 'outline',\n        className:\n          'border border-border bg-background text-violet-600 *:data-alert-close:text-foreground',\n      },\n      {\n        variant: 'warning',\n        appearance: 'outline',\n        className:\n          'border border-border bg-background text-yellow-500 *:data-alert-close:text-foreground',\n      },\n      {\n        variant: 'mono',\n        appearance: 'outline',\n        className:\n          'border border-border bg-background text-foreground *:data-alert-close:text-foreground',\n      },\n\n      {\n        variant: 'secondary',\n        appearance: 'stroke',\n        className:\n          'border border-border bg-background [&>div:first-of-type>svg]:text-foreground',\n      },\n      {\n        variant: 'primary',\n        appearance: 'stroke',\n        className:\n          'border border-border bg-background [&>div:first-of-type>svg]:text-primary',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'stroke',\n        className:\n          'border border-border bg-background [&>div:first-of-type>svg]:text-destructive',\n      },\n      {\n        variant: 'success',\n        appearance: 'stroke',\n        className:\n          'border border-border bg-background [&>div:first-of-type>svg]:text-green-500',\n      },\n      {\n        variant: 'info',\n        appearance: 'stroke',\n        className:\n          'border border-border bg-background [&>div:first-of-type>svg]:text-violet-600',\n      },\n      {\n        variant: 'warning',\n        appearance: 'stroke',\n        className:\n          'border border-border bg-background [&>div:first-of-type>svg]:text-yellow-500',\n      },\n      {\n        variant: 'mono',\n        appearance: 'stroke',\n        className:\n          'border border-border bg-background [&>div:first-of-type>svg]:text-foreground',\n      },\n\n      {\n        variant: 'secondary',\n        appearance: 'light',\n        className: 'bg-muted border border-border text-foreground',\n      },\n      {\n        variant: 'primary',\n        appearance: 'light',\n        className:\n          'bg-primary/5 border border-primary/10 text-foreground [&>div:first-of-type>svg]:text-primary',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'light',\n        className:\n          'bg-destructive/5 border border-destructive/10 text-foreground [&>div:first-of-type>svg]:text-destructive',\n      },\n      {\n        variant: 'success',\n        appearance: 'light',\n        className:\n          'bg-green-50 dark:bg-green-950/30 border border-green-200 dark:border-green-950/50 text-foreground [&>div:first-of-type>svg]:text-green-500',\n      },\n      {\n        variant: 'info',\n        appearance: 'light',\n        className:\n          'bg-violet-50 dark:bg-violet-950/30 border border-violet-200 dark:border-violet-950/50 text-foreground [&>div:first-of-type>svg]:text-violet-600',\n      },\n      {\n        variant: 'warning',\n        appearance: 'light',\n        className:\n          'bg-yellow-50 dark:bg-yellow-950/30 border border-yellow-200 dark:border-yellow-950/50 text-foreground [&>div:first-of-type>svg]:text-yellow-500',\n      },\n\n      {\n        variant: 'mono',\n        icon: 'primary',\n        className: '[&>div:first-of-type>svg]:text-primary',\n      },\n      {\n        variant: 'mono',\n        icon: 'warning',\n        className: '[&>div:first-of-type>svg]:text-yellow-500',\n      },\n      {\n        variant: 'mono',\n        icon: 'success',\n        className: '[&>div:first-of-type>svg]:text-green-500',\n      },\n      {\n        variant: 'mono',\n        icon: 'destructive',\n        className: '[&>div:first-of-type>svg]:text-destructive',\n      },\n      {\n        variant: 'mono',\n        icon: 'info',\n        className: '[&>div:first-of-type>svg]:text-violet-600',\n      },\n    ],\n    defaultVariants: {\n      variant: 'secondary',\n      appearance: 'solid',\n      size: 'md',\n    },\n  },\n);\n\ninterface AlertProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof alertVariants> {\n  close?: boolean;\n  onClose?: () => void;\n}\n\ninterface AlertIconProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof alertVariants> {}\n\nfunction Alert({\n  className,\n  variant,\n  size,\n  icon,\n  appearance,\n  close = false,\n  onClose,\n  children,\n  ...props\n}: AlertProps) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(\n        alertVariants({ variant, size, icon, appearance }),\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      {close && (\n        <Button\n          size=\"sm\"\n          variant=\"inverse\"\n          mode=\"icon\"\n          onClick={onClose}\n          aria-label=\"Dismiss\"\n          data-alert-close=\"true\"\n          className={cn('group shrink-0 size-4')}\n        >\n          <X className=\"opacity-60! group-hover:opacity-100! size-4!\" />\n        </Button>\n      )}\n    </div>\n  );\n}\n\nfunction AlertTitle({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn('grow tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertIcon({ children, className, ...props }: AlertIconProps) {\n  return (\n    <div\n      data-slot=\"alert-icon\"\n      className={cn('shrink-0', className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction AlertToolbar({ children, className, ...props }: AlertIconProps) {\n  return (\n    <div data-slot=\"alert-toolbar\" className={cn(className)} {...props}>\n      {children}\n    </div>\n  );\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn('text-sm [&_p]:leading-relaxed [&_p]:mb-2', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertContent({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <div\n      data-slot=\"alert-content\"\n      className={cn(\n        'space-y-2 [&_[data-slot=alert-title]]:font-semibold',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Alert,\n  AlertContent,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n  AlertToolbar,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/button.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown, LucideIcon } from 'lucide-react';\n\nconst buttonVariants = cva(\n  'cursor-pointer group whitespace-nowrap focus-visible:outline-hidden inline-flex items-center justify-center has-data-[arrow=true]:justify-between whitespace-nowrap text-sm font-medium ring-offset-background transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-60 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary:\n          'bg-primary text-primary-foreground hover:bg-primary/90 data-[state=open]:bg-primary/90',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black hover:bg-zinc-950/90 dark:hover:bg-zinc-300/90 data-[state=open]:bg-zinc-950/90 dark:data-[state=open]:bg-zinc-300/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90 data-[state=open]:bg-destructive/90',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/90 data-[state=open]:bg-secondary/90',\n        outline:\n          'bg-background text-accent-foreground border border-input hover:bg-accent data-[state=open]:bg-accent',\n        dashed:\n          'text-accent-foreground border border-input border-dashed bg-background hover:bg-accent hover:text-accent-foreground data-[state=open]:text-accent-foreground',\n        ghost:\n          'text-accent-foreground hover:bg-accent hover:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        dim: 'text-muted-foreground hover:text-foreground data-[state=open]:text-foreground',\n        foreground: '',\n        inverse: '',\n      },\n      appearance: {\n        default: '',\n        ghost: '',\n      },\n      underline: {\n        solid: '',\n        dashed: '',\n      },\n      underlined: {\n        solid: '',\n        dashed: '',\n      },\n      size: {\n        lg: 'h-10 rounded-md px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-8.5 rounded-md px-3 gap-1.5 text-[0.8125rem] leading-(--text-sm--line-height) [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-7 rounded-md px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n      },\n      autoHeight: {\n        true: '',\n        false: '',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n      mode: {\n        default:\n          'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        icon: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        link: 'text-primary h-auto p-0 bg-transparent rounded-none hover:bg-transparent data-[state=open]:bg-transparent',\n        input: `\n            justify-start font-normal hover:bg-background [&_svg]:transition-colors [&_svg]:hover:text-foreground data-[state=open]:bg-background \n            focus-visible:border-ring focus-visible:outline-hidden focus-visible:ring-[3px] focus-visible:ring-ring/30 \n            [[data-state=open]>&]:border-ring [[data-state=open]>&]:outline-hidden [[data-state=open]>&]:ring-[3px] \n            [[data-state=open]>&]:ring-ring/30 \n            aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n            in-data-[invalid=true]:border-destructive/60 in-data-[invalid=true]:ring-destructive/10  dark:in-data-[invalid=true]:border-destructive dark:in-data-[invalid=true]:ring-destructive/20\n          `,\n      },\n      placeholder: {\n        true: 'text-muted-foreground',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      // Icons opacity for default mode\n      {\n        variant: 'ghost',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n\n      // Icons opacity for default mode\n      {\n        variant: 'outline',\n        mode: 'input',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        className: '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n      },\n\n      // Auto height\n      {\n        size: 'md',\n        autoHeight: true,\n        className: 'h-auto min-h-8.5',\n      },\n      {\n        size: 'sm',\n        autoHeight: true,\n        className: 'h-auto min-h-7',\n      },\n      {\n        size: 'lg',\n        autoHeight: true,\n        className: 'h-auto min-h-10',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Link\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      // Ghost\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className:\n          'bg-transparent text-primary/90 hover:bg-primary/5 data-[state=open]:bg-primary/5',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className:\n          'bg-transparent text-destructive/90 hover:bg-destructive/5 data-[state=open]:bg-destructive/5',\n      },\n      {\n        variant: 'ghost',\n        mode: 'icon',\n        className: 'text-muted-foreground',\n      },\n\n      // Size\n      {\n        size: 'sm',\n        mode: 'icon',\n        className: 'w-7 h-7 p-0 [[&_svg:not([class*=size-])]:size-3.5',\n      },\n      {\n        size: 'md',\n        mode: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'lg',\n        mode: 'icon',\n        className: 'w-10 h-10 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n\n      // Input mode\n      {\n        mode: 'input',\n        placeholder: true,\n        variant: 'outline',\n        className: 'font-normal text-muted-foreground',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'sm',\n        className: 'gap-1.25',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'md',\n        className: 'gap-1.5',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'lg',\n        className: 'gap-1.5',\n      },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      mode: 'default',\n      size: 'md',\n      shape: 'default',\n      appearance: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  selected,\n  variant,\n  shape,\n  appearance,\n  mode,\n  size,\n  autoHeight,\n  underlined,\n  underline,\n  asChild = false,\n  placeholder = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    selected?: boolean;\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : 'button';\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          shape,\n          appearance,\n          mode,\n          autoHeight,\n          placeholder,\n          underlined,\n          underline,\n          className,\n        }),\n        asChild && props.disabled && 'pointer-events-none opacity-50',\n      )}\n      {...(selected && { 'data-state': 'open' })}\n      {...props}\n    />\n  );\n}\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon; // Allows passing any Lucide icon\n}\n\nfunction ButtonArrow({\n  icon: Icon = ChevronDown,\n  className,\n  ...props\n}: ButtonArrowProps) {\n  return (\n    <Icon\n      data-slot=\"button-arrow\"\n      className={cn('ms-auto -me-1', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Button, ButtonArrow, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/badge.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n  dotClassName?: string;\n  disabled?: boolean;\n}\n\nexport interface BadgeButtonProps\n  extends React.ButtonHTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeButtonVariants> {\n  asChild?: boolean;\n}\n\nexport type BadgeDotProps = React.HTMLAttributes<HTMLSpanElement>;\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center border font-medium focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 [&_svg]:-ms-px [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground',\n        secondary: 'bg-secondary text-secondary-foreground',\n        success: 'bg-green-500 text-white',\n        warning: 'bg-yellow-500 text-white',\n        info: 'bg-violet-500 text-white',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black',\n        destructive: 'bg-destructive text-destructive-foreground',\n      },\n      appearance: {\n        solid: 'border-transparent',\n        outline: '',\n        light: '',\n        stroke: 'bg-transparent border border-border text-secondary-foreground',\n        ghost: 'border-transparent bg-transparent',\n      },\n      disabled: {\n        true: 'opacity-50 pointer-events-none',\n      },\n      size: {\n        lg: 'rounded-md px-[0.5rem] h-7 min-w-7 gap-1.5 text-xs [&_svg]:size-3.5',\n        md: 'rounded-md px-[0.45rem] h-6 min-w-6 gap-1.5 text-xs [&_svg]:size-3.5 ',\n        sm: 'rounded-sm px-[0.325rem] h-5 min-w-5 gap-1 text-[0.6875rem] leading-[0.75rem] [&_svg]:size-3',\n        xs: 'rounded-sm px-[0.25rem] h-4 min-w-4 gap-1 text-[0.625rem] leading-[0.5rem] [&_svg]:size-3',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n    },\n    compoundVariants: [\n      {\n        variant: 'primary',\n        appearance: 'outline',\n        className: 'bg-primary/10 border-primary/10 text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'outline',\n        className:\n          'bg-secondary dark:bg-secondary/50 border-border text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'outline',\n        className:\n          'border bg-green-100 text-green-700 border-green-200 dark:text-green-600 dark:bg-green-950/50 dark:border-green-950',\n      },\n      {\n        variant: 'warning',\n        appearance: 'outline',\n        className:\n          'border bg-yellow-100 text-yellow-700 border-yellow-200 dark:text-yellow-600 dark:bg-yellow-950/50 dark:border-yellow-950',\n      },\n      {\n        variant: 'info',\n        appearance: 'outline',\n        className:\n          'border bg-violet-100 text-violet-700 border-violet-200 dark:text-violet-600 dark:bg-violet-950/50 dark:border-violet-950',\n      },\n      {\n        variant: 'mono',\n        appearance: 'outline',\n        className:\n          'bg-zinc-100 dark:bg-zinc-300/10 border-zinc-300 dark:border-zinc-300/10 text-zinc-950 dark:text-zinc-200',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'outline',\n        className: 'bg-destructive/10 border-destructive/10 text-destructive',\n      },\n\n      {\n        variant: 'primary',\n        appearance: 'light',\n        className: 'bg-primary/10 text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'light',\n        className:\n          'bg-secondary dark:bg-secondary/50 text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'light',\n        className:\n          'border bg-green-100 text-green-700 dark:text-green-600 dark:bg-green-950/50',\n      },\n      {\n        variant: 'warning',\n        appearance: 'light',\n        className:\n          'border bg-yellow-100 text-yellow-700 dark:text-yellow-600 dark:bg-yellow-950/50',\n      },\n      {\n        variant: 'info',\n        appearance: 'light',\n        className:\n          'border bg-violet-100 text-violet-700 dark:text-violet-600 dark:bg-violet-950/50',\n      },\n      {\n        variant: 'mono',\n        appearance: 'light',\n        className:\n          'bg-zinc-200 dark:bg-zinc-300/10 text-zinc-950 dark:text-zinc-200',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'light',\n        className: 'bg-destructive/10 text-destructive',\n      },\n\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'ghost',\n        className: 'text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'ghost',\n        className: 'text-green-500',\n      },\n      {\n        variant: 'warning',\n        appearance: 'ghost',\n        className: 'text-yellow-500',\n      },\n      { variant: 'info', appearance: 'ghost', className: 'text-violet-500' },\n      { variant: 'mono', appearance: 'ghost', className: 'text-foreground' },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'text-destructive',\n      },\n\n      { size: 'lg', appearance: 'ghost', className: 'px-0' },\n      { size: 'md', appearance: 'ghost', className: 'px-0' },\n      { size: 'sm', appearance: 'ghost', className: 'px-0' },\n      { size: 'xs', appearance: 'ghost', className: 'px-0' },\n    ],\n    defaultVariants: {\n      variant: 'secondary',\n      appearance: 'solid',\n      size: 'md',\n    },\n  },\n);\n\nconst badgeButtonVariants = cva(\n  'cursor-pointer transition-all inline-flex items-center justify-center leading-none size-3.5 [&>svg]:opacity-100! [&>svg]:size-3.5 p-0 rounded-md -me-0.5 opacity-60 hover:opacity-100',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  size,\n  appearance,\n  shape,\n  asChild = false,\n  disabled,\n  ...props\n}: BadgeProps) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(\n        badgeVariants({ variant, size, appearance, shape, disabled }),\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction BadgeButton({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: BadgeButtonProps) {\n  const Comp = asChild ? Slot : 'span';\n  return (\n    <Comp\n      data-slot=\"badge-button\"\n      className={cn(badgeButtonVariants({ variant, className }))}\n      role=\"button\"\n      {...props}\n    />\n  );\n}\n\nfunction BadgeDot({ className, ...props }: BadgeDotProps) {\n  return (\n    <span\n      data-slot=\"badge-dot\"\n      className={cn(\n        'size-1.5 rounded-full bg-[currentColor] opacity-75',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, BadgeButton, BadgeDot, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
