{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "command",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-dialog",
    "cmdk@1.0.0",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dialog",
    "class-variance-authority",
    "lucide-react",
    "cmdk"
  ],
  "registryDependencies": [
    "https://reui.io/r/dialog.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/command.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport {\n  Dialog,\n  DialogContent,\n  DialogTitle,\n} from '@/registry/default/ui/dialog';\nimport { type DialogProps } from '@radix-ui/react-dialog';\nimport { Command as CommandPrimitive } from 'cmdk';\nimport { Check, LucideIcon, Search } from 'lucide-react';\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      className={cn(\n        'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\ntype CommandDialogProps = DialogProps & { className?: string };\n\nconst CommandDialog = ({\n  children,\n  className,\n  ...props\n}: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className={cn('overflow-hidden p-0 shadow-lg', className)}>\n        <DialogTitle className=\"hidden\" />\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      className=\"flex items-center border-border border-b px-3\"\n      cmdk-input-wrapper=\"\"\n      data-slot=\"command-input\"\n    >\n      <Search className=\"me-2 h-4 w-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        className={cn(\n          'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-hidden text-foreground placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        'max-h-[300px] overflow-y-auto overflow-x-hidden',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  );\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        'overflow-hidden p-1.5 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn('-mx-1.5 h-px bg-border', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        'relative flex text-foreground cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        'ms-auto text-xs tracking-widest text-muted-foreground',\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon; // Allows passing any Lucide icon\n}\n\nfunction CommandCheck({\n  icon: Icon = Check,\n  className,\n  ...props\n}: ButtonArrowProps) {\n  return (\n    <Icon\n      data-slot=\"command-check\"\n      data-check=\"true\"\n      className={cn('size-4 ms-auto text-primary', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Command,\n  CommandCheck,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/dialog.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\nconst dialogContentVariants = cva(\n  'flex flex-col fixed outline-0 z-50 border border-border bg-background p-6 shadow-lg shadow-black/5 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 sm:rounded-lg',\n  {\n    variants: {\n      variant: {\n        default:\n          'left-[50%] top-[50%] max-w-lg translate-x-[-50%] translate-y-[-50%] w-full',\n        fullscreen: 'inset-5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'fixed inset-0 z-50 bg-black/30 [backdrop-filter:blur(4px)] data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogContent({\n  className,\n  children,\n  close = true,\n  overlay = true,\n  variant,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> &\n  VariantProps<typeof dialogContentVariants> & {\n    close?: boolean;\n    overlay?: boolean;\n  }) {\n  return (\n    <DialogPortal>\n      {overlay && <DialogOverlay />}\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(dialogContentVariants({ variant }), className)}\n        {...props}\n      >\n        {children}\n        {close && (\n          <DialogClose className=\"cursor-pointer outline-0 absolute end-5 top-5 rounded-sm opacity-60 ring-offset-background transition-opacity hover:opacity-100 focus:outline-hidden disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n            <X className=\"size-4\" />\n            <span className=\"sr-only\">Close</span>\n          </DialogClose>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n}\n\nexport default DialogContent;\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    data-slot=\"dialog-header\"\n    className={cn(\n      'flex flex-col space-y-1 text-center sm:text-start mb-5',\n      className,\n    )}\n    {...props}\n  />\n);\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    data-slot=\"dialog-footer\"\n    className={cn(\n      'flex flex-col-reverse sm:flex-row sm:justify-end pt-5 sm:space-x-2.5',\n      className,\n    )}\n    {...props}\n  />\n);\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\n        'text-lg font-semibold leading-none tracking-tight',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nconst DialogBody = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div data-slot=\"dialog-body\" className={cn('grow', className)} {...props} />\n);\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Dialog,\n  DialogBody,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}