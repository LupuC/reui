{
  "scrollspy": {
    "code": "import { ReactNode, RefObject, useCallback, useEffect, useRef } from 'react';\n\ntype ScrollspyProps = {\n  children: ReactNode;\n  targetRef?: RefObject<HTMLElement | Document | undefined>;\n  onUpdate?: (id: string) => void;\n  offset?: number;\n  smooth?: boolean;\n  className?: string;\n  dataAttribute?: string;\n  history?: boolean;\n  throttleTime?: number;\n};\n\nexport function Scrollspy({\n  children,\n  targetRef,\n  onUpdate,\n  className,\n  offset = 0,\n  smooth = true,\n  dataAttribute = 'scrollspy',\n  history = true,\n  throttleTime = 200,\n}: ScrollspyProps) {\n  const selfRef = useRef<HTMLDivElement | null>(null);\n  const anchorElementsRef = useRef<Element[] | null>(null);\n  const prevIdTracker = useRef<string | null>(null);\n\n  const throttle = <T extends (...args: unknown[]) => void>(\n    func: T,\n    limit: number,\n  ) => {\n    let lastFunc: ReturnType<typeof setTimeout> | undefined;\n    let lastRan: number | undefined;\n\n    return function (this: unknown, ...args: Parameters<T>) {\n      const now = Date.now();\n\n      if (lastRan === undefined) {\n        func.apply(this, args);\n        lastRan = now;\n      } else {\n        clearTimeout(lastFunc);\n        lastFunc = setTimeout(\n          () => {\n            if (now - lastRan! >= limit) {\n              // Type assertion\n              func.apply(this, args);\n              lastRan = now;\n            }\n          },\n          limit - (now - lastRan!),\n        ); // Type assertion\n      }\n    };\n  };\n\n  // Check if the element is visible\n  const isVisible = (element: HTMLElement): boolean => {\n    if (!element || element.getClientRects().length === 0) {\n      return false;\n    }\n    return (\n      getComputedStyle(element).getPropertyValue('visibility') === 'visible'\n    );\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const replaceHash = useCallback(\n    throttle((sectionId) => {\n      window.history.replaceState({}, '', `#${sectionId}`);\n    }, throttleTime),\n    [throttleTime],\n  );\n\n  // Update the active anchor based on the scroll position\n  const updateAnchor = (anchorElement: HTMLElement) => {\n    const sectionId = anchorElement.getAttribute(\n      `data-${dataAttribute}-anchor`,\n    );\n    const sectionElement = document.getElementById(sectionId!);\n\n    if (!sectionElement || !isVisible(sectionElement)) return;\n\n    const scrollPosition =\n      targetRef?.current === document\n        ? window.scrollY || document.documentElement.scrollTop\n        : (targetRef?.current as HTMLElement).scrollTop;\n\n    let customOffset = offset;\n    const dataOffset = anchorElement.getAttribute(\n      `data-${dataAttribute}-offset`,\n    );\n    if (dataOffset) {\n      customOffset = parseInt(dataOffset, 10);\n    }\n\n    const offsetTop = sectionElement.offsetTop;\n\n    if (scrollPosition + customOffset >= offsetTop) {\n      anchorElementsRef.current?.forEach((item) => {\n        item.removeAttribute('data-active');\n      });\n\n      anchorElement.setAttribute('data-active', 'true');\n\n      if (onUpdate && sectionId) {\n        onUpdate(sectionId);\n      }\n\n      prevIdTracker.current = sectionId;\n\n      if (history) {\n        replaceHash(sectionId);\n      }\n\n      const parentAnchorElements = anchorElement.closest(\n        `[data-${dataAttribute}-group`,\n      );\n      if (parentAnchorElements) {\n        parentAnchorElements\n          .querySelector(`[data-${dataAttribute}]`)\n          ?.setAttribute('data-active', 'true');\n      }\n    }\n  };\n\n  // Handle the scroll event\n  const handleScroll = useCallback(() => {\n    anchorElementsRef.current?.forEach((element) => {\n      updateAnchor(element as HTMLElement); // Ensuring type as HTMLElement\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [anchorElementsRef]);\n\n  // Handle smooth scrolling to a section on click or when URL hash is present\n  const scrollTo = useCallback(\n    (anchorElement: HTMLElement) => (event?: Event) => {\n      if (event) event.preventDefault();\n      const sectionId = anchorElement\n        .getAttribute(`data-${dataAttribute}-anchor`)\n        ?.replace('#', '');\n      const sectionElement = document.getElementById(sectionId!);\n      if (!sectionElement) return;\n\n      const scrollToElement =\n        targetRef?.current === document ? window : targetRef?.current;\n\n      let customOffset = offset;\n      const dataOffset = anchorElement.getAttribute(\n        `data-${dataAttribute}-offset`,\n      );\n      if (dataOffset) {\n        customOffset = parseInt(dataOffset, 10);\n      }\n\n      const scrollTop = sectionElement.offsetTop - customOffset;\n\n      if (scrollToElement && 'scrollTo' in scrollToElement) {\n        scrollToElement.scrollTo({\n          top: scrollTop,\n          left: 0,\n          behavior: smooth ? 'smooth' : 'auto',\n        });\n      }\n    },\n    [dataAttribute, offset, smooth, targetRef],\n  );\n\n  // Scroll to the section if the ID is present in the URL hash\n  const scrollToHashSection = useCallback(() => {\n    const hash = CSS.escape(window.location.hash.replace('#', ''));\n\n    if (hash) {\n      const targetElement = document.querySelector(\n        `[data-${dataAttribute}-anchor=\"${hash}\"]`,\n      ) as HTMLElement;\n      if (targetElement) {\n        scrollTo(targetElement)();\n      }\n    }\n  }, [dataAttribute, scrollTo]);\n\n  useEffect(() => {\n    // Query elements and store them in the ref, avoiding unnecessary re-renders\n    if (selfRef.current) {\n      anchorElementsRef.current = Array.from(\n        selfRef.current.querySelectorAll(`[data-${dataAttribute}-anchor]`),\n      );\n    }\n\n    anchorElementsRef.current?.forEach((item) => {\n      item.addEventListener('click', scrollTo(item as HTMLElement));\n    });\n\n    const scrollElement =\n      targetRef?.current === document ? window : targetRef?.current;\n\n    // Attach the scroll event to the correct scrollable element\n    scrollElement?.addEventListener('scroll', handleScroll);\n\n    // Check if there's a hash in the URL and scroll to the corresponding section\n    setTimeout(() => {\n      scrollToHashSection();\n    }, 100); // Adding a slight delay to ensure content is fully rendered\n\n    return () => {\n      scrollElement?.removeEventListener('scroll', handleScroll);\n      anchorElementsRef.current?.forEach((item) => {\n        item.removeEventListener('click', scrollTo(item as HTMLElement));\n      });\n    };\n  }, [\n    targetRef,\n    selfRef,\n    handleScroll,\n    dataAttribute,\n    scrollTo,\n    scrollToHashSection,\n  ]);\n\n  return (\n    <div data-slot=\"scrollspy\" className={className} ref={selfRef}>\n      {children}\n    </div>\n  );\n}\n",
    "highlightedCode": "<pre class=\"shiki github-dark-default\" style=\"background-color:#0d1117;color:#e6edf3\" tabindex=\"0\"><code data-line-numbers=\"\"><span class=\"line\"><span style=\"color:#FF7B72\">import</span><span style=\"color:#E6EDF3\"> { ReactNode, RefObject, useCallback, useEffect, useRef } </span><span style=\"color:#FF7B72\">from</span><span style=\"color:#A5D6FF\"> 'react'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">type</span><span style=\"color:#FFA657\"> ScrollspyProps</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  children</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> ReactNode</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  targetRef</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#FFA657\"> RefObject</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#FFA657\">HTMLElement</span><span style=\"color:#FF7B72\"> |</span><span style=\"color:#FFA657\"> Document</span><span style=\"color:#FF7B72\"> |</span><span style=\"color:#79C0FF\"> undefined</span><span style=\"color:#E6EDF3\">>;</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  onUpdate</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FFA657\">id</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> string</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#79C0FF\"> void</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  offset</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  smooth</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> boolean</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  className</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> string</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  dataAttribute</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> string</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  history</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> boolean</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  throttleTime</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">export</span><span style=\"color:#FF7B72\"> function</span><span style=\"color:#D2A8FF\"> Scrollspy</span><span style=\"color:#E6EDF3\">({</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  children</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  targetRef</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  onUpdate</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  className</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  offset</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> 0</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  smooth</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> true</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  dataAttribute</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#A5D6FF\"> 'scrollspy'</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  history</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> true</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  throttleTime</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> 200</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> ScrollspyProps</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> selfRef</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useRef</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#FFA657\">HTMLDivElement</span><span style=\"color:#FF7B72\"> |</span><span style=\"color:#79C0FF\"> null</span><span style=\"color:#E6EDF3\">>(</span><span style=\"color:#79C0FF\">null</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> anchorElementsRef</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useRef</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#FFA657\">Element</span><span style=\"color:#E6EDF3\">[] </span><span style=\"color:#FF7B72\">|</span><span style=\"color:#79C0FF\"> null</span><span style=\"color:#E6EDF3\">>(</span><span style=\"color:#79C0FF\">null</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> prevIdTracker</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useRef</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#79C0FF\">string</span><span style=\"color:#FF7B72\"> |</span><span style=\"color:#79C0FF\"> null</span><span style=\"color:#E6EDF3\">>(</span><span style=\"color:#79C0FF\">null</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#D2A8FF\"> throttle</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> &#x3C;</span><span style=\"color:#FFA657\">T</span><span style=\"color:#FF7B72\"> extends</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">...</span><span style=\"color:#FFA657\">args</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> unknown</span><span style=\"color:#E6EDF3\">[]) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#79C0FF\"> void</span><span style=\"color:#E6EDF3\">>(</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">    func</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> T</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">    limit</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  ) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    let</span><span style=\"color:#E6EDF3\"> lastFunc</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> ReturnType</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#FF7B72\">typeof</span><span style=\"color:#E6EDF3\"> setTimeout> </span><span style=\"color:#FF7B72\">|</span><span style=\"color:#79C0FF\"> undefined</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    let</span><span style=\"color:#E6EDF3\"> lastRan</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#FF7B72\"> |</span><span style=\"color:#79C0FF\"> undefined</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    return</span><span style=\"color:#FF7B72\"> function</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#79C0FF\">this</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> unknown</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#FF7B72\">...</span><span style=\"color:#FFA657\">args</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> Parameters</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#FFA657\">T</span><span style=\"color:#E6EDF3\">>) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> now</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> Date.</span><span style=\"color:#D2A8FF\">now</span><span style=\"color:#E6EDF3\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (lastRan </span><span style=\"color:#FF7B72\">===</span><span style=\"color:#79C0FF\"> undefined</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        func.</span><span style=\"color:#D2A8FF\">apply</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">this</span><span style=\"color:#E6EDF3\">, args);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        lastRan </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> now;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      } </span><span style=\"color:#FF7B72\">else</span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">        clearTimeout</span><span style=\"color:#E6EDF3\">(lastFunc);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        lastFunc </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> setTimeout</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          () </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">            if</span><span style=\"color:#E6EDF3\"> (now </span><span style=\"color:#FF7B72\">-</span><span style=\"color:#E6EDF3\"> lastRan</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#FF7B72\"> >=</span><span style=\"color:#E6EDF3\"> limit) {</span></span>\n<span class=\"line\"><span style=\"color:#8B949E\">              // Type assertion</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">              func.</span><span style=\"color:#D2A8FF\">apply</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">this</span><span style=\"color:#E6EDF3\">, args);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">              lastRan </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> now;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">            }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          },</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          limit </span><span style=\"color:#FF7B72\">-</span><span style=\"color:#E6EDF3\"> (now </span><span style=\"color:#FF7B72\">-</span><span style=\"color:#E6EDF3\"> lastRan</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">),</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        ); </span><span style=\"color:#8B949E\">// Type assertion</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    };</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Check if the element is visible</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#D2A8FF\"> isVisible</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FFA657\">element</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> HTMLElement</span><span style=\"color:#E6EDF3\">)</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> boolean</span><span style=\"color:#FF7B72\"> =></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">element </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#E6EDF3\"> element.</span><span style=\"color:#D2A8FF\">getClientRects</span><span style=\"color:#E6EDF3\">().</span><span style=\"color:#79C0FF\">length</span><span style=\"color:#FF7B72\"> ===</span><span style=\"color:#79C0FF\"> 0</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      return</span><span style=\"color:#79C0FF\"> false</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    return</span><span style=\"color:#E6EDF3\"> (</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">      getComputedStyle</span><span style=\"color:#E6EDF3\">(element).</span><span style=\"color:#D2A8FF\">getPropertyValue</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'visibility'</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">===</span><span style=\"color:#A5D6FF\"> 'visible'</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    );</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // eslint-disable-next-line react-hooks/exhaustive-deps</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> replaceHash</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useCallback</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">    throttle</span><span style=\"color:#E6EDF3\">((</span><span style=\"color:#FFA657\">sectionId</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      window.history.</span><span style=\"color:#D2A8FF\">replaceState</span><span style=\"color:#E6EDF3\">({}, </span><span style=\"color:#A5D6FF\">''</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#A5D6FF\">`#${</span><span style=\"color:#E6EDF3\">sectionId</span><span style=\"color:#A5D6FF\">}`</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }, throttleTime),</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    [throttleTime],</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Update the active anchor based on the scroll position</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#D2A8FF\"> updateAnchor</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FFA657\">anchorElement</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> HTMLElement</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> sectionId</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> anchorElement.</span><span style=\"color:#D2A8FF\">getAttribute</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#A5D6FF\">      `data-${</span><span style=\"color:#E6EDF3\">dataAttribute</span><span style=\"color:#A5D6FF\">}-anchor`</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    );</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> sectionElement</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> document.</span><span style=\"color:#D2A8FF\">getElementById</span><span style=\"color:#E6EDF3\">(sectionId</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">sectionElement </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#FF7B72\"> !</span><span style=\"color:#D2A8FF\">isVisible</span><span style=\"color:#E6EDF3\">(sectionElement)) </span><span style=\"color:#FF7B72\">return</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> scrollPosition</span><span style=\"color:#FF7B72\"> =</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      targetRef?.current </span><span style=\"color:#FF7B72\">===</span><span style=\"color:#E6EDF3\"> document</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">        ?</span><span style=\"color:#E6EDF3\"> window.scrollY </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#E6EDF3\"> document.documentElement.scrollTop</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">        :</span><span style=\"color:#E6EDF3\"> (targetRef?.current </span><span style=\"color:#FF7B72\">as</span><span style=\"color:#FFA657\"> HTMLElement</span><span style=\"color:#E6EDF3\">).scrollTop;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    let</span><span style=\"color:#E6EDF3\"> customOffset </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> offset;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> dataOffset</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> anchorElement.</span><span style=\"color:#D2A8FF\">getAttribute</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#A5D6FF\">      `data-${</span><span style=\"color:#E6EDF3\">dataAttribute</span><span style=\"color:#A5D6FF\">}-offset`</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    );</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (dataOffset) {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      customOffset </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> parseInt</span><span style=\"color:#E6EDF3\">(dataOffset, </span><span style=\"color:#79C0FF\">10</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> offsetTop</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> sectionElement.offsetTop;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (scrollPosition </span><span style=\"color:#FF7B72\">+</span><span style=\"color:#E6EDF3\"> customOffset </span><span style=\"color:#FF7B72\">>=</span><span style=\"color:#E6EDF3\"> offsetTop) {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      anchorElementsRef.current?.</span><span style=\"color:#D2A8FF\">forEach</span><span style=\"color:#E6EDF3\">((</span><span style=\"color:#FFA657\">item</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        item.</span><span style=\"color:#D2A8FF\">removeAttribute</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'data-active'</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      anchorElement.</span><span style=\"color:#D2A8FF\">setAttribute</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'data-active'</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#A5D6FF\">'true'</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (onUpdate </span><span style=\"color:#FF7B72\">&#x26;&#x26;</span><span style=\"color:#E6EDF3\"> sectionId) {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">        onUpdate</span><span style=\"color:#E6EDF3\">(sectionId);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      prevIdTracker.current </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> sectionId;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (history) {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">        replaceHash</span><span style=\"color:#E6EDF3\">(sectionId);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> parentAnchorElements</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> anchorElement.</span><span style=\"color:#D2A8FF\">closest</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#A5D6FF\">        `[data-${</span><span style=\"color:#E6EDF3\">dataAttribute</span><span style=\"color:#A5D6FF\">}-group`</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      );</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (parentAnchorElements) {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        parentAnchorElements</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          .</span><span style=\"color:#D2A8FF\">querySelector</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">`[data-${</span><span style=\"color:#E6EDF3\">dataAttribute</span><span style=\"color:#A5D6FF\">}]`</span><span style=\"color:#E6EDF3\">)</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          ?.</span><span style=\"color:#D2A8FF\">setAttribute</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'data-active'</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#A5D6FF\">'true'</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Handle the scroll event</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> handleScroll</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useCallback</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    anchorElementsRef.current?.</span><span style=\"color:#D2A8FF\">forEach</span><span style=\"color:#E6EDF3\">((</span><span style=\"color:#FFA657\">element</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">      updateAnchor</span><span style=\"color:#E6EDF3\">(element </span><span style=\"color:#FF7B72\">as</span><span style=\"color:#FFA657\"> HTMLElement</span><span style=\"color:#E6EDF3\">); </span><span style=\"color:#8B949E\">// Ensuring type as HTMLElement</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    });</span></span>\n<span class=\"line\"><span style=\"color:#8B949E\">    // eslint-disable-next-line react-hooks/exhaustive-deps</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  }, [anchorElementsRef]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Handle smooth scrolling to a section on click or when URL hash is present</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> scrollTo</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useCallback</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    (</span><span style=\"color:#FFA657\">anchorElement</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> HTMLElement</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FFA657\">event</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#FFA657\"> Event</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (event) event.</span><span style=\"color:#D2A8FF\">preventDefault</span><span style=\"color:#E6EDF3\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> sectionId</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> anchorElement</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        .</span><span style=\"color:#D2A8FF\">getAttribute</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">`data-${</span><span style=\"color:#E6EDF3\">dataAttribute</span><span style=\"color:#A5D6FF\">}-anchor`</span><span style=\"color:#E6EDF3\">)</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        ?.</span><span style=\"color:#D2A8FF\">replace</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'#'</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#A5D6FF\">''</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> sectionElement</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> document.</span><span style=\"color:#D2A8FF\">getElementById</span><span style=\"color:#E6EDF3\">(sectionId</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">sectionElement) </span><span style=\"color:#FF7B72\">return</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> scrollToElement</span><span style=\"color:#FF7B72\"> =</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        targetRef?.current </span><span style=\"color:#FF7B72\">===</span><span style=\"color:#E6EDF3\"> document </span><span style=\"color:#FF7B72\">?</span><span style=\"color:#E6EDF3\"> window </span><span style=\"color:#FF7B72\">:</span><span style=\"color:#E6EDF3\"> targetRef?.current;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      let</span><span style=\"color:#E6EDF3\"> customOffset </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> offset;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> dataOffset</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> anchorElement.</span><span style=\"color:#D2A8FF\">getAttribute</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#A5D6FF\">        `data-${</span><span style=\"color:#E6EDF3\">dataAttribute</span><span style=\"color:#A5D6FF\">}-offset`</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      );</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (dataOffset) {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        customOffset </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> parseInt</span><span style=\"color:#E6EDF3\">(dataOffset, </span><span style=\"color:#79C0FF\">10</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> scrollTop</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> sectionElement.offsetTop </span><span style=\"color:#FF7B72\">-</span><span style=\"color:#E6EDF3\"> customOffset;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (scrollToElement </span><span style=\"color:#FF7B72\">&#x26;&#x26;</span><span style=\"color:#A5D6FF\"> 'scrollTo'</span><span style=\"color:#FF7B72\"> in</span><span style=\"color:#E6EDF3\"> scrollToElement) {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        scrollToElement.</span><span style=\"color:#D2A8FF\">scrollTo</span><span style=\"color:#E6EDF3\">({</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          top: scrollTop,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          left: </span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          behavior: smooth </span><span style=\"color:#FF7B72\">?</span><span style=\"color:#A5D6FF\"> 'smooth'</span><span style=\"color:#FF7B72\"> :</span><span style=\"color:#A5D6FF\"> 'auto'</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        });</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    },</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    [dataAttribute, offset, smooth, targetRef],</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Scroll to the section if the ID is present in the URL hash</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> scrollToHashSection</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useCallback</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> hash</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> CSS</span><span style=\"color:#E6EDF3\">.</span><span style=\"color:#D2A8FF\">escape</span><span style=\"color:#E6EDF3\">(window.location.hash.</span><span style=\"color:#D2A8FF\">replace</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'#'</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#A5D6FF\">''</span><span style=\"color:#E6EDF3\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (hash) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> targetElement</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> document.</span><span style=\"color:#D2A8FF\">querySelector</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#A5D6FF\">        `[data-${</span><span style=\"color:#E6EDF3\">dataAttribute</span><span style=\"color:#A5D6FF\">}-anchor=\"${</span><span style=\"color:#E6EDF3\">hash</span><span style=\"color:#A5D6FF\">}\"]`</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      ) </span><span style=\"color:#FF7B72\">as</span><span style=\"color:#FFA657\"> HTMLElement</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (targetElement) {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">        scrollTo</span><span style=\"color:#E6EDF3\">(targetElement)();</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  }, [dataAttribute, scrollTo]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  useEffect</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#8B949E\">    // Query elements and store them in the ref, avoiding unnecessary re-renders</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (selfRef.current) {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      anchorElementsRef.current </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> Array.</span><span style=\"color:#D2A8FF\">from</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        selfRef.current.</span><span style=\"color:#D2A8FF\">querySelectorAll</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">`[data-${</span><span style=\"color:#E6EDF3\">dataAttribute</span><span style=\"color:#A5D6FF\">}-anchor]`</span><span style=\"color:#E6EDF3\">),</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      );</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    anchorElementsRef.current?.</span><span style=\"color:#D2A8FF\">forEach</span><span style=\"color:#E6EDF3\">((</span><span style=\"color:#FFA657\">item</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      item.</span><span style=\"color:#D2A8FF\">addEventListener</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'click'</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#D2A8FF\">scrollTo</span><span style=\"color:#E6EDF3\">(item </span><span style=\"color:#FF7B72\">as</span><span style=\"color:#FFA657\"> HTMLElement</span><span style=\"color:#E6EDF3\">));</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> scrollElement</span><span style=\"color:#FF7B72\"> =</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      targetRef?.current </span><span style=\"color:#FF7B72\">===</span><span style=\"color:#E6EDF3\"> document </span><span style=\"color:#FF7B72\">?</span><span style=\"color:#E6EDF3\"> window </span><span style=\"color:#FF7B72\">:</span><span style=\"color:#E6EDF3\"> targetRef?.current;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">    // Attach the scroll event to the correct scrollable element</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    scrollElement?.</span><span style=\"color:#D2A8FF\">addEventListener</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'scroll'</span><span style=\"color:#E6EDF3\">, handleScroll);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">    // Check if there's a hash in the URL and scroll to the corresponding section</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">    setTimeout</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">      scrollToHashSection</span><span style=\"color:#E6EDF3\">();</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }, </span><span style=\"color:#79C0FF\">100</span><span style=\"color:#E6EDF3\">); </span><span style=\"color:#8B949E\">// Adding a slight delay to ensure content is fully rendered</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    return</span><span style=\"color:#E6EDF3\"> () </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      scrollElement?.</span><span style=\"color:#D2A8FF\">removeEventListener</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'scroll'</span><span style=\"color:#E6EDF3\">, handleScroll);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      anchorElementsRef.current?.</span><span style=\"color:#D2A8FF\">forEach</span><span style=\"color:#E6EDF3\">((</span><span style=\"color:#FFA657\">item</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        item.</span><span style=\"color:#D2A8FF\">removeEventListener</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'click'</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#D2A8FF\">scrollTo</span><span style=\"color:#E6EDF3\">(item </span><span style=\"color:#FF7B72\">as</span><span style=\"color:#FFA657\"> HTMLElement</span><span style=\"color:#E6EDF3\">));</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      });</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    };</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  }, [</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    targetRef,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    selfRef,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    handleScroll,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    dataAttribute,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    scrollTo,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    scrollToHashSection,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  ]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  return</span><span style=\"color:#E6EDF3\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;</span><span style=\"color:#7EE787\">div</span><span style=\"color:#79C0FF\"> data-slot</span><span style=\"color:#FF7B72\">=</span><span style=\"color:#A5D6FF\">\"scrollspy\"</span><span style=\"color:#79C0FF\"> className</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">className</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#79C0FF\"> ref</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">selfRef</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      {</span><span style=\"color:#E6EDF3\">children</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;/</span><span style=\"color:#7EE787\">div</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  );</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span></span>\n<span class=\"line\"></span></code></pre>",
    "sourcePath": "registry/default/ui",
    "filePath": "registry/default/ui/scrollspy.tsx",
    "timestamp": "2025-05-08T17:15:57.165Z"
  }
}
